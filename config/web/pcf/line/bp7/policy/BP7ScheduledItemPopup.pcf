<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="pcf.xsd">
  <Popup
    beforeValidate="gw.lob.bp7.schedules.validation.BP7ScheduleValidation .validateSchedule(schedule as gw.api.productmodel.Schedule &amp; gw.api.domain.Clause)"
    canEdit="openForEdit"
    id="BP7ScheduledItemPopup"
    startEditing="if (not {gw.lob.bp7.BP7Categories.BP7LineAddlInsuredGrp.Code, gw.lob.bp7.BP7Categories.BP7LocationAddlInsuredGrp.Code, gw.lob.bp7.BP7Categories.BP7BuildingAddlInterestGrp_EXT.Code}.contains(category.Code) and (schedule as gw.api.domain.Clause).Pattern != &quot;BP7LossPayable&quot; and schedule.ScheduledItems.Count == 0) schedule.createAndAddScheduledItem()"
    startInEditMode="startInEdit"
    title="schedule.ScheduleName">
    <LocationEntryPoint
      signature="BP7ScheduledItemPopup(schedule : gw.api.productmodel.Schedule, category : gw.api.productmodel.CoverageCategory, openForEdit : boolean, startInEdit : boolean, jobWizardHelper : gw.api.web.job.JobWizardHelper)"/>
    <Variable
      name="schedule"
      type="gw.api.productmodel.Schedule"/>
    <Variable
      name="category"
      type="gw.api.productmodel.CoverageCategory"/>
    <Variable
      name="openForEdit"
      type="boolean"/>
    <Variable
      name="startInEdit"
      type="boolean"/>
    <Variable
      name="jobWizardHelper"
      type="gw.api.web.job.JobWizardHelper"/>
    <Variable
      initialValue="gw.plugin.Plugins.get(gw.plugin.contact.IContactConfigPlugin)"
      name="contactConfigPlugin"/>
    <Variable
      initialValue="(schedule as gw.api.domain.Clause).PolicyLine.ExistingAdditionalInsureds.asViews()"
      name="existingAdditionalInsureds"
      recalculateOnRefresh="true"
      type="AccountContactView[]"/>
    <Variable
      initialValue="(schedule as gw.api.domain.Clause).PolicyLine.AdditionalInsuredOtherCandidates.asViews()"
      name="otherContacts"
      recalculateOnRefresh="true"
      type="AccountContactView[]"/>
    <Variable
      initialValue="schedule.AdditionalInterestContainer"
      name="additionalInterestContainer"/>
    <Screen>
      <Toolbar>
        <EditButtons/>
        <AddButton
          hideIfReadOnly="true"
          id="AddContactsButton"
          iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
          label="displaykey.Web.Contact.Add"
          subMenuOnDemand="true"
          visible="schedule.IsAdditionalInsuredSchedule">
          <AddMenuItemIterator
            elementName="contactType"
            value="contactConfigPlugin.getAllowedContactTypesForPolicyContactRoleType(typekey.PolicyContactRole.TC_POLICYADDLINSURED)">
            <IteratorSort
              sortBy="contactType.DisplayName"
              sortOrder="1"/>
            <AddMenuItem
              conversionExpression="schedule.addNewScheduledItem(PickedValue)"
              id="ContactType"
              iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
              label="displaykey.Web.Contact.AddNewOfType(contactType)"
              pickLocation="NewAdditionalInsuredPopup.push((schedule as gw.api.domain.Clause).PolicyLine, contactType, schedule.AdditionalInsuredType)"/>
          </AddMenuItemIterator>
          <AddMenuItem
            conversionExpression="schedule.addNewScheduledItem((schedule as gw.api.domain.Clause).PolicyLine.addNewAdditionalInsuredDetailForContact(PickedValue))"
            id="AddFromSearch"
            iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Policy.Contact.FromAddressBook"
            pickLocation="ContactSearchPopup.push(&quot;AdditionalInsured&quot;)"/>
          <AddMenuItem
            id="AddExistingContact"
            iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Policy.Contact.AddExisting(PolicyAddlInsured.Type.TypeInfo.DisplayName)"
            visible="true">
            <AddMenuItemIterator
              elementName="additionalInsured"
              id="ContactOfSameType"
              value="existingAdditionalInsureds">
              <IteratorSort
                sortBy="additionalInsured.DisplayName"
                sortOrder="1"/>
              <AddMenuItem
                id="ExistingAdditionalInsured"
                iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
                label="additionalInsured"
                toCreateAndAdd="schedule.addNewScheduledItem((schedule as gw.api.domain.Clause).PolicyLine.addNewAdditionalInsuredDetailForContact((additionalInsured.AccountContact.Contact)))"/>
            </AddMenuItemIterator>
          </AddMenuItem>
          <AddMenuItem
            id="AddOtherContact"
            iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Policy.Contact.AddOtherContacts"
            visible="getOtherContacts().Count &gt; 0">
            <AddMenuItemIterator
              elementName="otherContact"
              id="ContactOfOtherType"
              value="otherContacts">
              <IteratorSort
                sortBy="otherContact.DisplayName"
                sortOrder="1"/>
              <AddMenuItem
                id="OtherContact"
                iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
                label="otherContact"
                toCreateAndAdd="schedule.addNewScheduledItem((schedule as gw.api.domain.Clause).PolicyLine.addNewAdditionalInsuredDetailForContact(otherContact.AccountContact.Contact))"/>
            </AddMenuItemIterator>
          </AddMenuItem>
        </AddButton>
        <AddButton
          hideIfReadOnly="true"
          id="AddAdditionalInterestButton"
          iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
          label="displaykey.Web.Contact.Add"
          subMenuOnDemand="true"
          visible="schedule.IsAdditionalInterestSchedule">
          <AddMenuItemIterator
            elementName="contactType"
            value="contactConfigPlugin.getAllowedContactTypesForPolicyContactRoleType(typekey.PolicyContactRole.TC_POLICYADDLINTEREST)">
            <IteratorSort
              sortBy="contactType.DisplayName"
              sortOrder="1"/>
            <AddMenuItem
              conversionExpression="schedule.addNewScheduledItem(PickedValue)"
              id="ContactType"
              iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
              label="displaykey.Web.Contact.AddNewOfType(contactType)"
              pickLocation="NewAdditionalInterestPopup.push(additionalInterestContainer, contactType)"/>
          </AddMenuItemIterator>
          <AddMenuItem
            conversionExpression="schedule.addNewScheduledItem(additionalInterestContainer.addAdditionalInterestDetail(PickedValue))"
            id="AddFromSearch"
            iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Policy.Contact.FromAddressBook"
            pickLocation="ContactSearchPopup.push(&quot;AdditionalInterest&quot;)"/>
          <AddMenuItem
            id="AddOtherContact"
            iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Policy.Contact.AddOtherContacts"
            visible="getOtherContacts().Count &gt; 0">
            <AddMenuItemIterator
              elementName="otherContact"
              id="ContactOfOtherType"
              value="additionalInterestContainer.AdditionalInterestOtherCandidates">
              <IteratorSort
                sortBy="otherContact.DisplayName"
                sortOrder="1"/>
              <AddMenuItem
                id="OtherContact"
                iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"
                label="otherContact"
                toCreateAndAdd="schedule.addNewScheduledItem(additionalInterestContainer.addAdditionalInterestDetail(otherContact.Contact))"/>
            </AddMenuItemIterator>
          </AddMenuItem>
        </AddButton>
        <IteratorButtons
          addVisible="not (schedule.IsAdditionalInsuredSchedule or schedule.IsAdditionalInterestSchedule)"
          iterator="BP7ScheduledItemsLV.ScheduledItemsIterator"/>
      </Toolbar>
      <ListDetailPanel
        selectionName="selectedScheduledItem"
        selectionType="entity.ScheduledItem">
        <PanelRef
          def="BP7ScheduledItemsLV(schedule, openForEdit)"
          editable="openForEdit"/>
        <CardViewPanel>
          <Variable
            initialValue="selectedScheduledItem typeis Coverable ? selectedScheduledItem : null"
            name="scheduledItemCoverable"
            recalculateOnRefresh="true"
            type="Coverable"/>
          <Variable
            initialValue="schedule.PropertyInfos"
            name="propertyInfos"
            recalculateOnRefresh="true"
            type="gw.api.productmodel.SchedulePropertyInfo[]"/>
          <Variable
            initialValue="schedule.ScheduledItemMultiPatterns?.where( \ pattern -&gt; (selectedScheduledItem as Coverable)?.isClauseSelectedOrAvailable(pattern)) ?: {}"
            name="clausePatterns"
            recalculateOnRefresh="true"
            type="gw.api.productmodel.ClausePattern[]"/>
          <Card
            id="DetailCard"
            title="displaykey.Web.Policy.BP7.Details"
            visible="not (schedule.ScheduledItems.Count == 0)">
            <PanelRow>
              <PanelColumn
                id="PropertyInfoInputs">
                <PanelRef>
                  <TitleBar
                    title="displaykey.Web.Policy.BP7.Schedule.ScheduledItem"/>
                  <DetailViewPanel>
                    <InputColumn>
                      <InputIterator
                        elementName="propertyInfo"
                        id="PropertyInfoValues"
                        value="propertyInfos">
                        <InputSetRef
                          def="ScheduledItemPropertyInputSet(propertyInfo, selectedScheduledItem, jobWizardHelper, new gw.lob.bp7.displayable.BP7SchedulePropertyInfoDisplayableFactory())"/>
                      </InputIterator>
                    </InputColumn>
                  </DetailViewPanel>
                </PanelRef>
              </PanelColumn>
              <PanelColumn
                id="CoverageInputs"
                visible="clausePatterns.HasElements">
                <PanelRef>
                  <TitleBar
                    title="displaykey.Web.Policy.Coverages"/>
                  <DetailViewPanel>
                    <InputColumn>
                      <InputIterator
                        elementName="clausePattern"
                        forceRefreshDespiteChangedEntries="true"
                        id="ClausePatternValues"
                        value="clausePatterns">
                        <IteratorSort
                          sortBy="clausePattern.Priority"
                          sortOrder="1"/>
                        <InputSetRef
                          def="BP7CoverageInputSet(clausePattern, scheduledItemCoverable, openForEdit, jobWizardHelper)"
                          mode="clausePattern.CodeIdentifier"/>
                      </InputIterator>
                    </InputColumn>
                  </DetailViewPanel>
                </PanelRef>
              </PanelColumn>
            </PanelRow>
          </Card>
        </CardViewPanel>
      </ListDetailPanel>
    </Screen>
  </Popup>
</PCF>