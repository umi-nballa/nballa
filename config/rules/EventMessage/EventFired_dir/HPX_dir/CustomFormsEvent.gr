package rules.EventMessage.EventFired_dir.HPX_dir
uses una.integration.mapping.hpx.common.HPXRequestMapper
uses una.forms.formsevents.EventTriggeredAvailability
uses una.integration.mapping.hpx.common.composition.HPXRecipientMapper

@gw.rules.RuleName("Custom Forms Event")
internal class CustomFormsEvent {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
/*start00rule*/
return FormsEventType.getTypeKeys(false).hasMatch( \ event -> event.Code.equalsIgnoreCase(messageContext.EventName))
/*end00rule*/
}

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/
var period = (messageContext.Root as PolicyPeriod)
period = period.getSlice(period.EditEffectiveDate)
var hpxRecipientMapper = new HPXRecipientMapper()
var eventMessageForms = period.NewlyAddedForms.where( \ form -> form.Pattern.InferenceClass.Supertype == EventTriggeredAvailability)
var ewsRequestXMLs = hpxRecipientMapper.createFormsForRecipients(period, eventMessageForms)
for (ewsRequestXML in ewsRequestXMLs) {
  messageContext.createMessage(ewsRequestXML)
}
/*end00rule*/
  }
}
