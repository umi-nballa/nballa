package rules.EventMessage.EventFired_dir.LexisFirst_dir.PolicyChange_dir
uses una.integration.plugins.lexisfirst.LexisFirstServicePayload

@gw.rules.RuleName("Change Period")
internal class ChangePeriod {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
/*start00rule*/
return (messageContext.EventName == LexisFirstServicePayload.ISSUEPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.CHANGEPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.CANCELPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.CREATEPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.REINSTATEPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.RENEWPERIOD_MSG ||
 messageContext.EventName == LexisFirstServicePayload.REWRITEPERIOD_MSG
 )
//and (messageContext.Root as PolicyPeriod).PolicyEndDate != null
/*end00rule*/
}

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/

 var policyPeriod = messageContext.Root as PolicyPeriod
 if(policyPeriod.Policy.Product == "Homeowners") {
 var servicePayload = new LexisFirstServicePayload()
 var eventName = messageContext.EventName
 var lexisFirstFileData = servicePayload.payLoadXML(policyPeriod,eventName)
 var xml = new una.gxmodels.lexisfirstfiledatamodel.LexisFirstFileData(lexisFirstFileData)
messageContext.createMessage(xml.asUTFString())
}
/*end00rule*/
  }
}
