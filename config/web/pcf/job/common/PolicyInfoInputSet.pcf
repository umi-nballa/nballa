<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <InputSet
    editable="openForEditInit.get()"
    id="PolicyInfoInputSet">
    <Require
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Require
      name="showWrittenDate"
      type="boolean"/>
    <Require
      name="showRewriteLinks"
      type="boolean"/>
    <Require
      name="showSplitSource"
      type="boolean"/>
    <Variable
      initialValue="gw.util.concurrent.LockingLazyVar.make(\ -&gt; policyPeriod.OpenForEdit)"
      name="openForEditInit"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="policyPeriod.PeriodStart"
      name="effectiveDate"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="policyPeriod.TermType"
      name="termType"/>
    <Variable
      initialValue="policyPeriod.Policy.RewrittenToNewAccountSource"
      name="rewriteSourcePolicy"
      type="Policy"/>
    <Variable
      initialValue="policyPeriod.Policy.DividedSourcePolicy"
      name="dividedSourcePolicy"
      type="Policy"/>
    <ReferencedWidget
      widget="UWCompanyInputSet"/>
    <Label
      label="displaykey.Web.SubmissionWizard.PolicyInfo.PolicyPeriod"/>
    <DateInput
      id="originalInceptionDate_Ext"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.OriginalInceptionDate_Ext"
      value="policyPeriod.inceptionDateBsdSrcSys()">
      <PostOnChange/>
    </DateInput>
    <TypeKeyInput
      editable="policyPeriod.Job typeis Submission "
      id="sourceSystem"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.SourceSystem_Ext"
      required="true"
      value="policyPeriod.SourceSystem_Ext">
      <PostOnChange
        target="legacyPolicyNumber_Ext"/>
    </TypeKeyInput>
    <Input
      editable="policyPeriod.Job typeis Submission"
      id="legacyPolicyNumber_Ext"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.PriorLegacyPolicyNumber_Ext"
      required="policyPeriod.SourceSystem_Ext == TC_LEGACY"
      value="policyPeriod.LegacyPolicyNumber_Ext"/>
    <TextInput
      editable="true"
      id="agentContactInfo"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.AgentContactInfo"
      required="false"
      value="policyPeriod.AgentContactInfo_Ext"/>
    <DateInput
      editable="!policyPeriod.HomeownersLine_HOEExists"
      id="DateLastInspection"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.DateLastInspection_Ext"
      value="policyPeriod.DateLastInspection_Ext"/>
    <!-- <DateInput
      editable="true"
      id="lastInspectionDate_Ext"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.DateLastInspection_Ext"
      value="policyPeriod.DateLastInspection_Ext"/> -->
    <DateInput
      editable="true"
      id="TenantInspOrderDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.TenantInspectionOrderDate"
      value="policyPeriod.TenantInspectionOrderDate_Ext "
      visible="policyPeriod.Policy.Product.Name==&quot;Businessowners (v7)&quot;"/>
    <DateInput
      editable="true"
      id="UNAWindMitReInspec_Ext"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.UNAWindMitInspectionDate_Ext"
      value="policyPeriod.UNAWindMitReinspectionDate_Ext"
      visible="policyPeriod.BaseState == TC_FL or policyPeriod.BaseState == TC_SC or policyPeriod.BaseState == TC_NC"/>
    <DateInput
      editable="true"
      id="UNAWindForm"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.UNAWindMitFormCompletionDate_Ext"
      value="policyPeriod.UNAWindMitFormCompDate_Ext"
      visible="policyPeriod.BaseState == TC_FL or policyPeriod.BaseState == TC_SC or policyPeriod.BaseState == TC_NC"/>
    <!-- Changing the term type updates the expiration date -->
    <RangeInput
      editable="policyPeriod.CanUpdatePeriodDates"
      id="TermType"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.TermType"
      required="true"
      value="termType"
      valueRange="gw.pcf.job.PolicyInfoHelper.getTermTypes(policyPeriod)">
      <PostOnChange
        onChange="policyPeriod.TermType = termType"/>
    </RangeInput>
    <Input
      id="TermNumber"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.TermNumber"
      value="policyPeriod.TermNumber"/>
    <TypeKeyInput
      id="HOPolicyType"
      label="displaykey.Web.Homeowners.PolicyTypeLabel"
      value="policyPeriod.HomeownersLine_HOE.HOPolicyType"
      visible="policyPeriod.HomeownersLine_HOEExists"/>
    <!-- Changing the effective date updates the expiration date when the term type is not "short" -->
    <DateInput
      editable="true"
      id="EffectiveDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.EffectiveDate"
      required="true"
      validationExpression="gw.policy.PolicyPeriodValidation.validateDateForRewriteNewAccount(policyPeriod) "
      value="effectiveDate">
      <PostOnChange
        onChange="gw.pcf.job.PolicyInfoHelper.setPeriodDates(policyPeriod, effectiveDate, termType)"
        target="ExpirationDate"/>
    </DateInput>
    <!-- Changing the expiration date updates the term type -->
    <DateInput
      editable="gw.pcf.job.PolicyInfoHelper.isExpirationDateEditable(policyPeriod, termType)"
      id="ExpirationDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.ExpirationDate"
      required="true"
      validationExpression="gw.policy.PolicyPeriodValidation.validatePeriodEndDoesNotOverlapRewrittenNewAccountPolicy(policyPeriod) "
      value="policyPeriod.PeriodEnd">
      <PostOnChange
        onChange="termType = policyPeriod.TermType"/>
    </DateInput>
    <DateInput
      editable="perm.System.editwrittendate &amp;&amp; policyPeriod.Job.Subtype!=typekey.Job.TC_POLICYCHANGE"
      id="WrittenDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.WrittenDate"
      required="true"
      value="policyPeriod.WrittenDate"
      visible="showWrittenDate"/>
    <DateInput
      dateFormat="short"
      editable="perm.System.editrateasofdate and not(policyPeriod.JobProcess typeis gw.job.NewTermProcess) &amp;&amp; policyPeriod.Job.Subtype!=typekey.Job.TC_POLICYCHANGE"
      id="RateAsOfDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.RateAsOfDate"
      required="not(policyPeriod.JobProcess typeis gw.job.NewTermProcess)"
      timeFormat="long"
      validationExpression="policyPeriod.RateAsOfDate.beforeOrEqual(java.util.Date.CurrentDate) ? null : displaykey.Web.Rating.Errors.FutureRateAsOfDate"
      value="policyPeriod.RateAsOfDate">
      <PostOnChange
        target="PolicyInfoInputSet"/>
    </DateInput>
    <DateInput
      editable="perm.System.editwrittendate &amp;&amp; policyPeriod.Job.Subtype!=typekey.Job.TC_POLICYCHANGE"
      id="AppraisalDate"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.AppraisalDate"
      required="false"
      value="policyPeriod.AppraisalDate_Ext"
      visible="policyPeriod.Policy.Product.Name==&quot;Commercial Package&quot; || policyPeriod.Policy.Product.Name==&quot;Businessowners (v7)&quot;"/>
    <TypeKeyInput
      editable="policyPeriod.Job typeis Issuance"
      id="BaseState"
      label="displaykey.Web.SubmissionWizard.PolicyInfo.BaseState"
      required="policyPeriod.Lines.countWhere( \ line -&gt; line.BaseStateRequired == true) &gt; 0"
      value="policyPeriod.BaseState"
      visible="gw.web.policy.PolicyInfoUIHelper.getBaseStateVisibility(policyPeriod)">
      <PostOnChange
        target="UWCompanyInputSet"/>
    </TypeKeyInput>
    <Input
      editable="true"
      id="PrimaryLanguage"
      label="displaykey.Web.EditAccount.PrimaryLanguage"
      value="policyPeriod.Policy.PrimaryLanguage"
      visible="gw.api.util.LocaleUtil.getAllLanguages().size() &gt; 1 and policyPeriod.Reinstatement == null"/>
    <Input
      action="if (perm.PolicyPeriod.view(rewriteSourcePolicy.LatestBoundPeriod)) {pcf.PolicyFileForward.go(rewriteSourcePolicy.LatestBoundPeriod.PolicyNumber)}"
      id="RewrittenSourcePolicy"
      label="displaykey.Web.PolicyFile.Summary.RewrittenSourcePolicy"
      value="displaykey.Web.PolicyFile.Summary.PolicyNumOnAccount(rewriteSourcePolicy.LatestBoundPeriod.PolicyNumber, rewriteSourcePolicy.Account.AccountNumber)"
      visible="rewriteSourcePolicy != null and showRewriteLinks"/>
    <Input
      action="pcf.PolicyFileForward.go(dividedSourcePolicy.LatestBoundPeriod.PolicyNumber)"
      id="DividedSourcePolicy"
      label="displaykey.Web.PolicyFile.Summary.DividedSourcePolicy"
      value="displaykey.Web.PolicyFile.Summary.PolicyNumOnAccount(dividedSourcePolicy.LatestBoundPeriod.PolicyNumberDisplayString, dividedSourcePolicy.Account.AccountNumber)"
      visible="dividedSourcePolicy != null and showSplitSource"/>
    <InputSet
      id="affinityGroupInputSet"
      visible="policyPeriod.HomeownersLine_HOE.HOPolicyType==HOPolicyType_HOE.TC_HO3 || policyPeriod.HomeownersLine_HOE.HOPolicyType==HOPolicyType_HOE.TC_HO6 || policyPeriod.HomeownersLine_HOE.HOPolicyType==HOPolicyType_HOE.TC_HOB_EXT">
      <Variable
        initialValue="una.config.AffinityGroupUtil.setAffinityDiscountEligibility(policyPeriod)"
        name="affinityDiscount"
        recalculateOnRefresh="true"
        type="boolean"/>
      <InputDivider/>
      <Label
        label="displaykey.Web.Admin.AffinityGroup"
        visible="policyPeriod.HomeownersLine_HOEExists"/>
      <PickerInput
        editable="true"
        id="AffinityGroup"
        inputConversion="gw.web.policy.PolicyInfoUIHelper.performAffinityGroupSearch(VALUE, policyPeriod)"
        label="displaykey.Web.Admin.AffinityGroup.Name"
        pickLocation="AffinityGroupSearchPopup.push(policyPeriod)"
        required="false"
        value="policyPeriod.PolicyTerm.AffinityGroup"
        visible="false"/>
      <RangeInput
        editable="true"
        id="PreferredBuilder"
        label="displaykey.Web.Admin.AffinityGroup.PreferredBuilder_Ext"
        value="policyPeriod.PreferredBuilder_Ext"
        valueRange="una.config.AffinityGroupUtil.getAffinityDiscountByCategory(AffinityDisCategory_Ext.TC_PREFERREDBUILDER, policyPeriod.BaseState, policyPeriod.EditEffectiveDate)"
        visible="policyPeriod.HomeownersLine_HOEExists">
        <PostOnChange
          target="affinityGroupInputSet"/>
      </RangeInput>
      <RangeInput
        editable="true"
        id="PreferredFinancialInstitution"
        label="displaykey.Web.Admin.AffinityGroup.PreferredFinInst_Ext"
        value="policyPeriod.PreferredFinInst_Ext"
        valueRange="una.config.AffinityGroupUtil.getAffinityDiscountByCategory(AffinityDisCategory_Ext.TC_PREFERREDFININST, policyPeriod.BaseState, policyPeriod.EditEffectiveDate)"
        visible="policyPeriod.HomeownersLine_HOEExists">
        <PostOnChange
          target="affinityGroupInputSet"/>
      </RangeInput>
      <RangeInput
        editable="true"
        id="EmployerGroup"
        label="displaykey.Web.Admin.AffinityGroup.PreferredEmployerGroup_Ext"
        value="policyPeriod.PreferredEmpGroup_Ext"
        valueRange="una.config.AffinityGroupUtil.getAffinityDiscountByCategory(AffinityDisCategory_Ext.TC_PREFERREDEMPLOYER, policyPeriod.BaseState, policyPeriod.EditEffectiveDate)"
        visible="policyPeriod.HomeownersLine_HOEExists">
        <PostOnChange
          target="affinityGroupInputSet"/>
      </RangeInput>
      <RangeInput
        editable="true"
        id="QualifiedAgent"
        label="displaykey.Web.Admin.AffinityGroup.QualifiedExclAgent_Ext"
        value="policyPeriod.QualifiedExclAgent_Ext"
        valueRange="typekey.QualifiedExclAgent_Ext.Type.getTypeKeysByCategory(policyPeriod.BaseState)"
        visible="policyPeriod.HomeownersLine_HOEExists">
        <PostOnChange
          target="affinityGroupInputSet"/>
      </RangeInput>
      <BooleanRadioInput
        id="QualifiesDiscount"
        label="displaykey.Web.Admin.AffinityGroup.AffinityDiscount_Ext"
        value="policyPeriod.QualifiesAffinityDisc_Ext"
        visible="policyPeriod.HomeownersLine_HOEExists"/>
    </InputSet>
  </InputSet>
</PCF>