<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <InputSet
    id="LocationDetailInputSet">
    <Require
      name="polLocation"
      type="PolicyLocation"/>
    <Require
      name="supportsNonSpecificLocation"
      type="boolean"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="line"
      type="String"/>
    <Variable
      initialValue="gw.lob.cp.location.CPLocationUtil.getTunaResponse(polLocation)"
      name="tunaAppResponse"/>
    <Variable
      initialValue="gw.lob.cp.location.CPLocationUtil.setTunaFieldsMatchLevel(tunaAppResponse,polLocation)"
      name="setTunaFieldsMatchLevel"/>
    <BooleanRadioInput
      id="AddressScrubbed"
      label="displaykey.Web.Account.Locations.AddressScrubbed"
      required="true"
      value="polLocation.AccountLocation.addressScrub_Ext">
      <PostOnChange/>
    </BooleanRadioInput>
    <BooleanRadioInput
      editable="false//polLocation.AccountLocation.New"
      id="NonSpecificLocation"
      label="displaykey.Web.Account.Locations.LocationIsNonSpecific"
      value="polLocation.AccountLocation.NonSpecific"
      visible="true//not polLocation.AccountLocation.New or supportsNonSpecificLocation">
      <PostOnChange/>
    </BooleanRadioInput>
    <Input
      editable="true"
      id="LocationCode"
      label="displaykey.Web.Policy.LocationContainer.Location.LocationCode"
      value="polLocation.AccountLocation.LocationCode"
      visible="false//polLocation.Branch.Policy.Product.Commercial"/>
    <Input
      editable="true"
      id="LocationName"
      label="displaykey.Web.Policy.LocationContainer.Location.LocationName"
      value="polLocation.AccountLocation.LocationName"
      visible="polLocation.Branch.Policy.Product.Commercial"/>
    <InputSetRef
      def="TargetedAddressInputSet(new una.extensions.UnaPolicyLocationAddressOwner(polLocation,polLocation.Branch))"
      mode="&quot;location&quot;//polLocation.CountryCode"
      visible="polLocation.SyncedToAccount"
      widgets="LocationDetailInputSet"/>
    <InputSet
      id="UnsyncedAddressInputSet"
      visible="not polLocation.SyncedToAccount">
      <TextInput
        id="unsyncedAddressString"
        label="displaykey.Web.Policy.LocationContainer.Location.Address"
        value="polLocation.addressString(&quot;\n&quot;, false, false)"/>
      <TextInput
        editable="true"
        id="UnsyncedCounty"
        label="displaykey.Web.ContactDetail.AddressDetail.County"
        value="polLocation.County"/>
      <TypeKeyInput
        editable="polLocation.canChangeState()"
        id="UnsyncedCountry"
        label="displaykey.Web.ContactDetail.AddressDetail.Country"
        required="true"
        value="polLocation.Country">
        <PostOnChange/>
      </TypeKeyInput>
    </InputSet>
    <InputSetRef
      def="GlobalPhoneInputSet(new gw.api.phone.BasicPhoneOwner(new gw.api.phone.EntityPhoneDelegate(polLocation.AccountLocation, AccountLocation#Phone), displaykey.Web.Policy.LocationContainer.Location.Phone, openForEdit))"
      editable="true"
      id="Phone"
      visible="true"/>
    <PickerInput
      available="gw.api.domain.StateSet.get(&quot;TaxLocation&quot;).contains(polLocation.State)"
      editable="true"
      id="TaxLocation"
      inputConversion="getTaxLocation(VALUE, polLocation)"
      label="displaykey.Web.Policy.LocationContainer.Location.TaxLocation"
      pickLocation="TaxLocationSearchPopup.push(polLocation.Branch, gw.api.util.JurisdictionMappingUtil.getJurisdiction(polLocation))"
      value="polLocation.TaxLocation"
      visible="polLocation.Branch.Lines.hasMatch(\ l -&gt; l.EmergencyServiceFunding)"/>
    <InputSet
      editable="true"
      id="TerritoryCodeInputSet"
      visible="line==null || !(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))//polLocation.TerritoryCodes.length != 0 and !polLocation.Branch.HasWorkersComp and polLocation.Country.UsesTerritoryCodes &amp;&amp; line!=null //&amp;&amp; !line.equals(&quot;cpline&quot;)">
      <ContentInput>
        <Link
          action="polLocation.TerritoryCodes.each(\ c -&gt; c.fillWithFirst())"
          hideIfReadOnly="true"
          id="AutofillLink"
          label="displaykey.Web.Policy.LocationContainer.Location.TerritoryCode.Autofill"
          styleClass="miniButton"
          visible="false"/>
      </ContentInput>
      <InputIterator
        elementName="territoryCode"
        value="getTC()">
        <IteratorSort
          sortBy="territoryCode.PolicyLinePattern.Priority"
          sortOrder="1"/>
        <PickerInput
          available="polLocation.State != null"
          editable="true"
          id="TerritoryCode"
          label="displaykey.Web.Policy.LocationContainer.Location.TerritoryCode(territoryCode.PolicyLinePattern.DisplayName)"
          pickLocation="TerritoryCodeSearchPopup.push(polLocation.Branch, territoryCode)"
          required="una.config.Locationutil.isTerritoryCodeRequired(territoryCode, line)//line!=null &amp;&amp; line.equals(&quot;cpline&quot;) &amp;&amp; territoryCode.PolicyLinePattern.CodeIdentifier==&quot;CPLine&quot;"
          value="territoryCode.Code"
          visible="true//line!=null &amp;&amp; line.equals(&quot;cpline&quot;) &amp;&amp; territoryCode.PolicyLinePattern.CodeIdentifier==&quot;CPLine&quot;"/>
        <ContentInput
          hideIfReadOnly="true"
          id="AutofillButton"/>
      </InputIterator>
    </InputSet>
    <InputSet
      editable="true"
      id="TerritoryCodeInputSetTuna"
      visible="(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))//cpBuilding.CPLocation.PolicyLocation != null and polLocation.TerritoryCodes.length != 0">
      <RangeInput
        available="!polLocation.OverrideTerritoryCode_Ext"
        editable="true"
        id="TerritoryCodeTunaReturned_Ext"
        label="displaykey.Web.CP.CPLocation.TerritoryCodeTunaReturned_Ext"
        value="polLocation.TerritoryCodeTunaReturned_Ext"
        valueRange="tunaAppResponse.TerritoryCodes"/>
      <Input
        available="!polLocation.OverrideTerritoryCode_Ext"
        id="TerritoryCodeMatchLevel_Ext"
        label="displaykey.Web.CP.CPLocation.TerritoryCodeMatchlevel_Ext"
        value="polLocation.TerritoryCodeMatchLevel_Ext"/>
      <BooleanRadioInput
        editable="true"
        id="OverRideTerritoryCode_Ext"
        label="displaykey.Web.CP.CPLocation.TerritoryCodeOverride_Ext"
        value="polLocation.OverrideTerritoryCode_Ext">
        <PostOnChange
          target="TerritoryCodeInputSet"/>
      </BooleanRadioInput>
      <InputIterator
        elementName="TerritoryCode"
        value="polLocation.TerritoryCodes">
        <IteratorSort
          sortBy="TerritoryCode.PolicyLinePattern.Priority"
          sortOrder="1"/>
        <PickerInput
          available="polLocation.State != null"
          editable="true"
          id="TerritoryCode"
          label="displaykey.Web.Policy.LocationContainer.Location.TerritoryCode(TerritoryCode.PolicyLinePattern.DisplayName)"
          pickLocation="TerritoryCodeSearchPopup.push(polLocation.Branch, TerritoryCode)"
          required="polLocation.OverrideTerritoryCode_Ext"
          value="polLocation.TerritoryCodeOverridden_Ext"
          visible="polLocation.OverrideTerritoryCode_Ext"/>
      </InputIterator>
    </InputSet>
    <InputDivider/>
    <InputSet
      id="PropFloodVal_Ext"
      visible="(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))">
      <RangeInput
        available="!polLocation.OverridePropFloodVal_Ext"
        editable="true"
        id="PropFloodValTunaReturned_Ext"
        label="displaykey.Web.CP.CPLocation.PropFloodValTunaReturned_Ext"
        value="polLocation.PropFloodVal_Ext"
        valueRange="gw.lob.ho.HODwellingUtil_HOE.getTunaCodes(tunaAppResponse.PropertyFlood)"/>
      <Input
        available="!polLocation.OverridePropFloodVal_Ext"
        id="PropFloodValMatchLevel_Ext"
        label="displaykey.Web.CP.CPLocation.PropFloodValMatchlevel_Ext"
        value="polLocation.PropFloodValMatchLevel_Ext"/>
      <BooleanRadioInput
        editable="true"
        id="OverRidePropFloodVal_Ext"
        label="displaykey.Web.CP.CPLocation.PropFloodValOverride_Ext"
        value="polLocation.OverridePropFloodVal_Ext">
        <PostOnChange
          target="PropFloodVal_Ext"/>
      </BooleanRadioInput>
      <Input
        available="polLocation.OverridePropFloodVal_Ext"
        editable="true"
        id="PropFloodValUserEntered_Ext"
        label="displaykey.Web.CP.CPLocation.PropFloodValUserEntered_Ext"
        required="polLocation.OverridePropFloodVal_Ext"
        value="polLocation.PropFloodValOverridden_Ext"
        visible="polLocation.OverridePropFloodVal_Ext"/>
    </InputSet>
    <InputDivider/>
    <TextInput
      editable="true"
      id="locationlatitude"
      label="&quot;Latitude&quot;"
      value="polLocation.Latitude_Ext"
      visible="line==null || !(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))"/>
    <TextInput
      editable="true"
      id="locationlongitude"
      label="&quot;Longitude&quot;"
      value="polLocation.Longitude_Ext"
      visible="line==null || !(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))"/>
    <InputDivider/>
    <InputSet
      id="latitude_Ext"
      visible="(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))">
      <RangeInput
        available="!polLocation.OverrideLatitude_Ext"
        editable="true"
        id="latitudeTunaReturned_Ext"
        label="displaykey.Web.CP.CPLocation.LatitudeTunaReturned_Ext"
        value="polLocation.Latitude_Ext"
        valueRange="{tunaAppResponse.Latitude}//gw.lob.ho.HODwellingUtil_HOE.getTunaCodes(tunaAppResponse.Latitude)"/>
      <Input
        available="!polLocation.OverrideLatitude_Ext"
        id="latitudeMatchLevel_Ext"
        label="displaykey.Web.CP.CPLocation.LatitudeMatchlevel_Ext"
        value="polLocation.LatitudeMatchLevel_Ext"/>
      <BooleanRadioInput
        editable="true"
        id="OverRideLatitude_Ext"
        label="displaykey.Web.CP.CPLocation.LatitudeOverride_Ext"
        value="polLocation.OverrideLatitude_Ext">
        <PostOnChange
          target="latitude_Ext"/>
      </BooleanRadioInput>
      <Input
        available="polLocation.OverrideLatitude_Ext"
        editable="true"
        id="latitudeUserEntered_Ext"
        label="displaykey.Web.CP.CPLocation.LatitudeUserEntered_Ext"
        required="polLocation.OverrideLatitude_Ext"
        value="polLocation.LatitudeOverridden_Ext"
        visible="polLocation.OverrideLatitude_Ext"/>
    </InputSet>
    <InputDivider/>
    <InputSet
      id="Longitude_Ext"
      visible="(line!=null &amp;&amp; line.equals(&quot;cpline&quot;))">
      <RangeInput
        available="!polLocation.OverrideLongitude_Ext"
        editable="true"
        id="LongitudeTunaReturned_Ext"
        label="displaykey.Web.CP.CPLocation.LongitudeTunaReturned_Ext"
        value="polLocation.Longitude_Ext"
        valueRange="{tunaAppResponse.Longitude}//gw.lob.ho.HODwellingUtil_HOE.getTunaCodes(tunaAppResponse.Longitude)"/>
      <Input
        available="!polLocation.OverrideLongitude_Ext"
        id="LongitudeMatchLevel_Ext"
        label="displaykey.Web.CP.CPLocation.LongitudeMatchlevel_Ext"
        value="polLocation.LongitudeMatchLevel_Ext"/>
      <BooleanRadioInput
        editable="true"
        id="OverRideLongitude_Ext"
        label="displaykey.Web.CP.CPLocation.LongitudeOverride_Ext"
        value="polLocation.OverrideLongitude_Ext">
        <PostOnChange
          target="Longitude_Ext"/>
      </BooleanRadioInput>
      <Input
        available="polLocation.OverrideLongitude_Ext"
        editable="true"
        id="LongitudeUserEntered_Ext"
        label="displaykey.Web.CP.CPLocation.LongitudeUserEntered_Ext"
        required="polLocation.OverrideLongitude_Ext"
        value="polLocation.LongitudeOverridden_Ext"
        visible="polLocation.OverrideLongitude_Ext"/>
    </InputSet>
    <Code><![CDATA[uses gw.api.util.DisplayableException

function getTaxLocation(code : String, policyLocation : PolicyLocation) : TaxLocation {
  if (code == null) {
    return null
  } else {
    var state = gw.api.util.JurisdictionMappingUtil.getJurisdiction(policyLocation)
    var locs = new gw.lob.common.TaxLocationQueryBuilder()
        .withCodeStarting(code)
        .withState(state)
        .withEffectiveOnDate(policyLocation.Branch.PeriodStart)
        .build().select() as gw.api.database.IQueryBeanResult<TaxLocation>
    if (locs.Count == 1) {
      return locs.FirstResult
    } else {
      throw new DisplayableException(displaykey.TaxLocation.Search.Error.InvalidCode(code, state.Description))
    }
  }
}

function getTC():TerritoryCode[]{
  var TC : TerritoryCode[]
  if (polLocation.Branch.HomeownersLine_HOEExists)
    TC = polLocation.TerritoryCodes.where( \ elt -> elt.PolicyLinePatternCode=="HomeownersLine_HOE")
   
  if(polLocation.Branch.CPLineExists)
     TC = polLocation.TerritoryCodes.where( \ elt -> elt.PolicyLinePatternCode=="CPLine" or  elt.PolicyLinePatternCode=="GLLine")

 // if(polLocation.Branch.CPLineExists)
 //   TC = polLocation.TerritoryCodes.where( \ elt -> elt.PolicyLinePatternCode=="GLLine")
  
   return TC 
}]]></Code>
  </InputSet>
</PCF>