<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <Popup
    canEdit="openForEdit"
    countsAsWork="false"
    id="BP7LocationPopup"
    returnType="BP7Location"
    startEditing="maybeCreateLocation()"
    startInEditMode="startInEdit"
    title="displaykey.Web.Policy.LocationContainer.Location.LocationInformation.Title">
    <LocationEntryPoint
      signature="BP7LocationPopup(accountLocation : AccountLocation, location : BP7Location, policyPeriod : PolicyPeriod, openForEdit : boolean, startInEdit : boolean, jobWizardHelper : web.job.JobWizardHelper)"/>
    <Variable
      name="accountLocation"
      type="AccountLocation"/>
    <Variable
      name="location"
      type="BP7Location"/>
    <Variable
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Variable
      name="openForEdit"
      type="boolean"/>
    <Variable
      name="startInEdit"
      type="boolean"/>
    <Variable
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Screen
      id="LocationScreen">
      <Toolbar>
        <EditButtons
          hideIfReadOnly="true"
          pickValue="location"/>
      </Toolbar>
      <PanelSet
        editable="openForEdit"
        id="LocationDetailPanelSet">
        <DetailViewPanel
          editable="true">
          <InputColumn>
            <InputSet
              id="BP7LocationDetailInputSet">
              <Variable
                initialValue="location.Branch.Policy.Product"
                name="product"/>
              <Variable
                initialValue="location.Location.AccountLocation"
                name="acctLocation"
                recalculateOnRefresh="true"/>
              <Variable
                initialValue="new contact.AddressAutocompleteHandler(&quot;city&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                name="cityhandler"/>
              <Variable
                initialValue="new contact.AddressAutocompleteHandler(&quot;county&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                name="countyhandler"
                type="contact.AddressAutocompleteHandler"/>
              <Variable
                initialValue="new contact.AddressAutocompleteHandler(&quot;postalcode&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                name="pchandler"
                type="contact.AddressAutocompleteHandler"/>
              <Variable
                initialValue="location.Location"
                name="polLocation"
                recalculateOnRefresh="true"/>
              <BooleanRadioInput
                editable="acctLocation.New"
                id="NonSpecificLocation"
                label="displaykey.Web.Account.Locations.LocationIsNonSpecific"
                value="acctLocation.NonSpecific">
                <PostOnChange/>
              </BooleanRadioInput>
              <!-- <Input
                editable="true"
                id="LocationCode"
                label="displaykey.Web.Policy.LocationContainer.Location.LocationCode"
                value="polLocation.AccountLocation.LocationCode"/> -->
              <Input
                editable="true"
                id="LocationName"
                label="displaykey.Web.Policy.LocationContainer.Location.LocationName"
                value="polLocation.AccountLocation.LocationName"/>
              <Input
                editable="true"
                id="inspectioncontact"
                label="displaykey.Web.Policy.LocationContainer.Location.InspectionContact"
                required="false"
                value="polLocation.InspectionContact">
                <PostOnChange/>
              </Input>
              <InputSetRef
                def="AddressInputSet(new gw.pcf.policylocation.PolicyLocationAddressOwner(polLocation))"
                mode="polLocation.CountryCode"
                visible="polLocation.SyncedToAccount"/>
              <InputSet
                id="UnsyncedAddressInputSet"
                visible="not polLocation.SyncedToAccount">
                <TextInput
                  id="unsyncedAddressString"
                  label="displaykey.Web.Policy.LocationContainer.Location.Address"
                  value="polLocation.addressString(&quot;\n&quot;, false, false)"/>
                <TextInput
                  editable="true"
                  id="UnsyncedCounty"
                  label="displaykey.Web.ContactDetail.AddressDetail.County"
                  value="polLocation.County"/>
                <TypeKeyInput
                  editable="polLocation.canChangeState()"
                  id="UnsyncedCountry"
                  label="displaykey.Web.ContactDetail.AddressDetail.Country"
                  required="true"
                  value="polLocation.Country">
                  <PostOnChange/>
                </TypeKeyInput>
              </InputSet>
              <InputSetRef
                def="GlobalPhoneInputSet(new gw.api.phone.BasicPhoneOwner(new gw.api.phone.EntityPhoneDelegate(polLocation.AccountLocation, polLocation.AccountLocation#Phone), displaykey.Web.Account.Locations.Phone))"
                editable="true"
                id="PhoneInput"/>
              <!-- <Input
                formatType="phoneNumber"
                id="Phone"
                label="displaykey.Web.Policy.LocationContainer.Location.Phone"
                validationExpression="gw.api.util.PhoneUtil.isValidExtension(polLocation.AccountLocation.Phone)"
                value="polLocation.AccountLocation.Phone"/> -->
              <PickerInput
                available="gw.api.domain.StateSet.get(&quot;TaxLocation&quot;).contains(polLocation.State)"
                editable="true"
                id="TaxLocation"
                inputConversion="getTaxLocation(VALUE, polLocation)"
                label="displaykey.Web.Policy.LocationContainer.Location.TaxLocation"
                pickLocation="TaxLocationSearchPopup.push(polLocation.Branch, gw.api.util.JurisdictionMappingUtil.getJurisdiction(polLocation))"
                value="polLocation.TaxLocation"
                visible="product == &quot;BusinessOwners&quot; or product == &quot;WorkersComp&quot; or product == &quot;CommercialProperty&quot;"/>
            </InputSet>
          </InputColumn>
        </DetailViewPanel>
      </PanelSet>
    </Screen>
    <Code><![CDATA[uses gw.api.util.DisplayableException
      
function maybeCreateLocation() {
  if (location == null) {
    if (accountLocation != null) {
      location = policyPeriod.BP7Line.addToLineSpecificLocations(accountLocation) as BP7Location
      for(var tc in location.Location.TerritoryCodes)
        tc.fillWithFirst()
    } else {
      location = policyPeriod.BP7Line.addNewLineSpecificLocation() as BP7Location
    }
  }
}

function getTaxLocation(code : String, policyLocation : PolicyLocation) : TaxLocation {
  if (code == null) {
    return null
  } else {
    var state = gw.api.util.JurisdictionMappingUtil.getJurisdiction(policyLocation)
    var locs = new gw.lob.common.TaxLocationQueryBuilder()
        .withCodeStarting(code)
        .withState(state)
        .withEffectiveOnDate(policyLocation.Branch.PeriodStart)
        .build().select() as gw.api.database.IQueryBeanResult<TaxLocation>
    if (locs.Count == 1) {
      return locs.FirstResult
    } else {
      throw new DisplayableException(displaykey.TaxLocation.Search.Error.InvalidCode(code, state.Description))
    }
  }
}
]]></Code>
  </Popup>
</PCF>