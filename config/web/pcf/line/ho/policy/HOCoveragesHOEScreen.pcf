<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <Screen
    editable="openForEdit and policyTypeValid"
    id="HOCoveragesHOEScreen">
    <Require
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="Job"
      type="Job"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      name="errorMessage"
      type="String"/>
    <Variable
      initialValue="getErrorMessageAndSetFlag()"
      name="policyTypeValid"/>
    <Toolbar>
      <WizardButtons/>
      <ToolbarButtonSetRef
        mode="Job.Subtype"
        toolbarButtonSet="JobWizardToolbarButtonSet(PolicyPeriod, Job, jobWizardHelper)"/>
    </Toolbar>
    <PanelRef
      def="OOSEPanelSet(policyPeriod, jobWizardHelper)"/>
    <PanelSet>
      <Verbatim
        label="errorMessage"
        visible="openForEdit and not policyTypeValid"
        warning="true"/>
    </PanelSet>
    <CardViewPanel>
      <Card
        id="HOPolicyLevelCoveragesID"
        title="displaykey.Web.Homeowners.HOCoveragesScreen.MainCoverage">
        <PanelRef
          def="HOMainCoveragesHOEPanelSet(policyPeriod.HomeownersLine_HOE, policyPeriod.HomeownersLine_HOE.Dwelling, openForEdit)"/>
      </Card>
      <Card
        id="HOPOlicyLevelEndorsementsCardId"
        title="displaykey.Web.Homeowners.HOCoveragesScreen.PolicyLevelEndorsements">
        <PanelRef
          def="HOAdditionalCoveragesPanelSet(policyPeriod.HomeownersLine_HOE, new String[] {&quot;HOLI_Optional_HOE&quot;, &quot;HOLI_SpecialLocationCov_HOE&quot;, &quot;HOSS_SchSpecialLocationCov_HOE_Ext&quot;, &quot;HODW_SchedLiabCov_HOE_Ext&quot;}, true)"
          id="HOLineEndorsements"/>
      </Card>
      <Card
        id="HODwellingEndorsementsCardId"
        title="displaykey.Web.Homeowners.HOCoveragesScreen.DwellingEndorsements">
        <PanelRef
          def="HOAdditionalCoveragesPanelSet(policyPeriod.HomeownersLine_HOE.Dwelling, new String[] {&quot;HODW_Optional_HOE&quot;, &quot;HODW_SpecialLocationCov_HOE&quot;, &quot;HODW_SchedulesCov_HOE&quot;}, true)"
          id="DwellingEndorsements"/>
      </Card>
      <Card
        id="HOPolicyLevelExclusionsAndConditionsCard"
        title="displaykey.Web.Homeowners.HOCoveragesScreen.PolicyLevelExclusionsAndConditions">
        <PanelRef
          def="HOAdditionalExclusionsAndConditionsPanelSet(policyPeriod.HomeownersLine_HOE, new String[] {&quot;HODW_ConditionsExclusions_HOE&quot;}, true)"
          id="PolicyLevelConditionsAndExclusions"/>
      </Card>
    </CardViewPanel>
    <Code><![CDATA[uses gw.validation.ValidationUtil
uses gw.lob.ho.HomeownersLineValidation_HOE
uses java.lang.StringBuilder

function getErrorMessageAndSetFlag() : Boolean {
  
  var newline = false
  var result = new StringBuilder()
  var count : int
  
  var context = ValidationUtil.createContext( "default" )
  var validation = new HomeownersLineValidation_HOE(context,policyPeriod.HomeownersLine_HOE )
  var policyCheckFlag = validation.validatePolicyType()
  
  if (not policyCheckFlag) {
    result = displaykey.Web.Policy.HomeownersLine.Validation.CoverageScreenUnavailable as java.lang.StringBuilder
    errorMessage = result as java.lang.String
  }
  
  return policyCheckFlag

}]]></Code>
  </Screen>
</PCF>