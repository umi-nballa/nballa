<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <Screen
    editable="openForEdit"
    id="SubmissionWizard_CreditReportScreen">
    <Require
      name="submission"
      type="Submission"/>
    <Require
      name="period"
      type="PolicyPeriod"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? false : period.CreditInfoExt.CreditReport.AlternateAddressInd"
      name="hasPrimaryNamedInsuredMoved"
      type="boolean"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null || period.CreditInfoExt.CreditReport.AlternateAddress == null ? new Address() : period.CreditInfoExt.CreditReport.AlternateAddress"
      name="aFormerAddress"
      type="Address"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? false : period.CreditInfoExt.CreditReport.AlternateNameInd"
      name="hasPrimaryNamedInsuredNameChanged"
      type="boolean"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? null : period.CreditInfoExt.CreditReport.PolicyContactRole"
      name="creditReportContact"
      type="PolicyContactRole"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? &quot;&quot; : period.CreditInfoExt.CreditReport.AlternateFirstName"
      name="formerFirstName"
      type="String"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? &quot;&quot; : period.CreditInfoExt.CreditReport.AlternateMiddleName"
      name="formerMiddleName"
      type="String"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? &quot;&quot; : period.CreditInfoExt.CreditReport.AlternateLastName"
      name="formerLastName"
      type="String"/>
    <Variable
      initialValue="period.CreditInfoExt.CreditReport == null ? true : false"
      name="creditLevelModeInd"
      type="boolean"/>
    <Variable
      initialValue="una.integration.framework.util.CreditReportUtil.isCreditReportRequired(period)"
      name="isCreditReportRequired"
      type="boolean"/>
    <Toolbar>
      <WizardButtons/>
      <ToolbarButtonSetRef
        mode="period.Job.Subtype"
        toolbarButtonSet="JobWizardToolbarButtonSet(period, submission, jobWizardHelper)"/>
    </Toolbar>
    <PanelRef>
      <DetailViewPanel
        visible="isCreditReportRequired">
        <InputColumn>
          <Label
            desc="User prompt"
            label="&quot;A credit level can be setup for a customer who wants a quick quote.&quot;"/>
          <Label
            id="Label3"
            label="&quot;In order to bind the policy, an actual credit score will be required.&quot;"/>
          <BooleanRadioInput
            editable="true"
            falseLabel="&quot;Credit Record&quot;"
            id="CreditLevelRecordSelector"
            label="displaykey.Web.SubmissionWizard.CreditReporting.CreditLevelReportSelector"
            trueLabel="&quot;Credit Level&quot;"
            value="creditLevelModeInd">
            <PostOnChange
              onChange="deactiveLiveCreditReport()"/>
          </BooleanRadioInput>
          <InputDivider/>
          <InputSet
            visible="creditLevelModeInd">
            <Input
              editable="true"
              id="CreditLevel"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditLevel"
              required="creditLevelModeInd"
              value="period.CreditInfoExt.CreditLevel">
              <PostOnChange/>
            </Input>
          </InputSet>
          <InputSet
            hideIfReadOnly="true"
            visible="!creditLevelModeInd">
            <Label
              id="Label2"
              label="&quot;A credit score is required in order to bind a policy. Request one here:&quot;"/>
            <RangeInput
              editable="true"
              id="CreditReportContact"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditReportIndividual"
              required="!creditLevelModeInd"
              value="creditReportContact"
              valueRange="period.PolicyContactRoles.where(\ p -&gt; p.Subtype == &quot;PolicyPriNamedInsured&quot; || p.Subtype == &quot;PolicySecNamedInsured&quot;)">
              <PostOnChange
                onChange="deactiveLiveCreditReport()"/>
            </RangeInput>
            <Input
              id="PolicyPrimaryInsured"
              label="displaykey.Web.SubmissionWizard.CreditReporting.PolicyName"
              value="creditReportContact.ContactDenorm.DisplayName"/>
            <Input
              id="PolicyAddress"
              label="displaykey.Web.SubmissionWizard.CreditReporting.PolicyAddress"
              value="creditReportContact.ContactDenorm.PrimaryAddress"/>
            <InputSet
              visible="!creditLevelModeInd">
              <BooleanRadioInput
                available="!(creditReportContact == null) &amp;&amp; isCreditReportInputFieldAvailable()"
                editable="true"
                id="AddressChangeQuestion"
                label="displaykey.Web.SubmissionWizard.CreditReporting.AlternateAddressQuestion"
                required="true"
                value="hasPrimaryNamedInsuredMoved"
                visible="true">
                <PostOnChange
                  onChange="updateFormerAddressFields()"/>
              </BooleanRadioInput>
              <Label
                id="FormerAddress"
                label="displaykey.Ext.FormerAddress"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="AddressLine1"
                label="displaykey.Web.ContactDetail.AddressDetail.AddressLine1"
                value="aFormerAddress.AddressLine1"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="AddressLine2"
                label="displaykey.Web.ContactDetail.AddressDetail.AddressLine2"
                value="aFormerAddress.AddressLine2"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="City"
                label="displaykey.Web.ContactDetail.AddressDetail.City"
                value="aFormerAddress.City"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TypeKeyInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="State"
                label="address.AddressDisplay.getStateLabel( period.PrimaryNamedInsured.ContactDenorm.PrimaryAddress)"
                value="aFormerAddress.State"
                visible="hasPrimaryNamedInsuredMoved">
                <Reflect
                  triggerIds="State,PostalCode"
                  value="gw.api.contact.AddressAutocompleteUtil.getAutofillValue(period.PrimaryNamedInsured.ContactDenorm.PrimaryAddress.Country,&quot;state&quot;,new String[]{&quot;State&quot;,&quot;PostalCode&quot;},new Object[] {VALUE1,VALUE2})"
                  valueRange="gw.api.contact.AddressAutocompleteUtil.getStates(period.PrimaryNamedInsured.ContactDenorm.PrimaryAddress.Country)"/>
              </TypeKeyInput>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="PostalCode"
                label="address.AddressDisplay.getPostalCodeLabel(  period.PrimaryNamedInsured.ContactDenorm.PrimaryAddress)"
                value="aFormerAddress.PostalCode"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="County"
                label="displaykey.Web.ContactDetail.AddressDetail.County"
                value="aFormerAddress.County"
                visible="hasPrimaryNamedInsuredMoved"/>
              <TypeKeyInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="Country"
                label="displaykey.Web.ContactDetail.AddressDetail.Country"
                value="aFormerAddress.Country"
                visible="hasPrimaryNamedInsuredMoved">
                <PostOnChange/>
              </TypeKeyInput>
              <BooleanRadioInput
                available="!(creditReportContact == null) &amp;&amp; isCreditReportInputFieldAvailable()"
                editable="true"
                id="NameChangeQuestion"
                label="displaykey.Ext.NameQuestion"
                required="true"
                value="hasPrimaryNamedInsuredNameChanged"
                visible="true">
                <PostOnChange
                  onChange="updateFormerNameFields()"/>
              </BooleanRadioInput>
              <Label
                id="FormerNameLabel"
                label="displaykey.Ext.FormerName"
                visible="hasPrimaryNamedInsuredNameChanged"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="AltFIrstName"
                label="displaykey.Ext.FirstName"
                value="formerFirstName"
                visible="hasPrimaryNamedInsuredNameChanged"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="AltMiddleName"
                label="displaykey.Ext.MidleName"
                value="formerMiddleName"
                visible="hasPrimaryNamedInsuredNameChanged"/>
              <TextInput
                available="isCreditReportInputFieldAvailable()"
                editable="true"
                id="AltLastName"
                label="displaykey.Ext.LastName"
                value="formerLastName"
                visible="hasPrimaryNamedInsuredNameChanged"/>
              <ButtonInput
                action="orderCreditReport()"
                available="isCreditReportInputFieldAvailable()"
                id="OrderCreditReportButton"
                value="&quot;Order Credit Report&quot;"
                visible="creditReportContact != null &amp;&amp; period.CreditInfoExt.CreditReport == null"/>
              <ButtonInput
                action="editCreditReportDetails()"
                available="!isCreditReportInputFieldAvailable()"
                id="EditDetailsButton"
                value="&quot;Edit credit report details&quot;"
                visible="creditReportContact != null &amp;&amp; period.CreditInfoExt.CreditReport != null"/>
            </InputSet>
          </InputSet>
          <InputDivider/>
          <InputSet
            visible="period.CreditInfoExt.CreditReport != null">
            <Label
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditReportEnabledPrompt"/>
            <Input
              id="CreditReportName"
              label="displaykey.Web.Policy.Name"
              value="period.CreditInfoExt.CreditReport.PolicyContactRole"/>
            <Input
              id="CreditReportStatus"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditStatus"
              value="period.CreditInfoExt.CreditReport.CreditStatus"/>
            <Input
              id="CreditReportScore"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditScore"
              value="period.CreditInfoExt.CreditReport.CreditScore"
              visible="perm.System.viewcreditscore"/>
            <Input
              id="CreditReportScoreFiltered"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditScore"
              value="displaykey.Web.SubmissionWizard.CreditReporting.SuppressedScorePrompt"
              visible="!perm.System.viewcreditscore"/>
            <Input
              id="CreditReportAlternativeName"
              label="displaykey.Web.SubmissionWizard.CreditReporting.AlternateName"
              value="buildCreditReportAltName()"/>
            <Input
              id="CreditReportAlternativeAddress"
              label="displaykey.Web.SubmissionWizard.CreditReporting.AlternateAddress"
              value="period.CreditInfoExt.CreditReport.AlternateAddress"/>
          </InputSet>
          <InputSet
            visible="creditLevelModeInd &amp;&amp; period.CreditInfoExt.CreditLevel != null">
            <Label
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditLevelEnabledPrompt"/>
            <Input
              id="OutputCreditLevelScore"
              label="displaykey.Web.SubmissionWizard.CreditReporting.CreditLevelScore"
              value="period.CreditInfoExt.CreditLevel!=null?period.CreditInfoExt.CreditLevel.Description:null"/>
          </InputSet>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
    <DetailViewPanel
      visible="!isCreditReportRequired">
      <InputColumn>
        <Label
          desc="User prompt"
          label="displaykey.Web.SubmissionWizard.CreditReporting.NoCreditCheckRequired"/>
      </InputColumn>
    </DetailViewPanel>
    <Code><![CDATA[/**
 * Common code to determine whether to enable/disable credit report name/address fields.
 */
 function isCreditReportInputFieldAvailable() : boolean {
     return period.CreditInfoExt.CreditReport == null
  }

/**
 * Before editing the policy holder details used to request a credit report, we should first
 * disable the existing report.
 */
function editCreditReportDetails() {
   
   period.CreditInfoExt.CreditReport = null 
}

/**
 * Build the alternative full-name that was on a credit report
 */
function buildCreditReportAltName() : String {
  var alternateName = ""
  if (period.CreditInfoExt.CreditReport.AlternateFirstName != null) {alternateName += period.CreditInfoExt.CreditReport.AlternateFirstName + " "}
  if (period.CreditInfoExt.CreditReport.AlternateMiddleName != null) {alternateName += period.CreditInfoExt.CreditReport.AlternateMiddleName + " "}
  if (period.CreditInfoExt.CreditReport.AlternateLastName != null) {alternateName += period.CreditInfoExt.CreditReport.AlternateLastName}
  return alternateName
  
}

function updateFormerAddressFields() {

   if (hasPrimaryNamedInsuredMoved) {
      // Copy policy address to credit report address
      //period.CreditReportExt.AlternateAddress = new Address()
      aFormerAddress.AddressLine1 = creditReportContact.ContactDenorm.PrimaryAddress.AddressLine1
      aFormerAddress.AddressLine2 = creditReportContact.ContactDenorm.PrimaryAddress.AddressLine2
      aFormerAddress.AddressLine3 = creditReportContact.ContactDenorm.PrimaryAddress.AddressLine3

      aFormerAddress.City = creditReportContact.ContactDenorm.PrimaryAddress.City
      aFormerAddress.State = creditReportContact.ContactDenorm.PrimaryAddress.State
      aFormerAddress.County = creditReportContact.ContactDenorm.PrimaryAddress.County
      aFormerAddress.Country = creditReportContact.ContactDenorm.PrimaryAddress.Country

   } else {
      // Reset credit report address
      //aFormerAddress = new Address() 
   }
}

function updateFormerNameFields() {

  period.CreditInfoExt.CreditReport = null
  if (hasPrimaryNamedInsuredNameChanged) {
     // Copy policy name to credit report name
      formerFirstName = (creditReportContact.ContactDenorm as Person).FirstName
      formerMiddleName  = (creditReportContact.ContactDenorm as Person).MiddleName
      formerLastName  = (creditReportContact.ContactDenorm as Person).LastName
  } else {
     // Clear credit report name
      formerFirstName = null
      formerMiddleName  = null
      formerLastName  = null
    
  }
}

function deactiveLiveCreditReport() {

  // Whenever we change screen mode or credit report parameters, we need to deactivate the active (live) credit report. 
  // 
  //period.CreditReportExt.ActiveOnPolicy = false
  period.CreditInfoExt.CreditReport = null
  period.CreditInfoExt.CreditLevel = null
 
}

function orderCreditReport() {
  var dispatcher = new una.integration.mapping.creditreport.CreditReportRequestDispatcher(creditReportContact, period)
  var address = hasPrimaryNamedInsuredMoved ? aFormerAddress : creditReportContact.ContactDenorm.PrimaryAddress
  var firstName = hasPrimaryNamedInsuredNameChanged ? formerFirstName : (creditReportContact.ContactDenorm as Person).FirstName
  var middleName = hasPrimaryNamedInsuredNameChanged ? formerMiddleName : (creditReportContact.ContactDenorm as Person).MiddleName
  var lastName = hasPrimaryNamedInsuredNameChanged ? formerLastName : (creditReportContact.ContactDenorm as Person).LastName

  // Download the credit report
  var response = dispatcher.orderNewCreditReport(address, firstName, middleName, lastName)
  
  // TO DO: The below code should not be inside the PCF.
  // At some point, we should move the below code inside the request dispatcher. 
  
  // Populate former (alternative) address field
  if ( hasPrimaryNamedInsuredMoved) {
    period.CreditInfoExt.CreditReport.AlternateAddressInd = true
    period.CreditInfoExt.CreditReport.AlternateAddress = aFormerAddress
  }
  
  // Populate former (alternative) name field
  if (hasPrimaryNamedInsuredNameChanged) {
      period.CreditInfoExt.CreditReport.AlternateNameInd = true
      period.CreditInfoExt.CreditReport.AlternateFirstName = formerFirstName 
      period.CreditInfoExt.CreditReport.AlternateMiddleName = formerMiddleName
      period.CreditInfoExt.CreditReport.AlternateLastName = formerLastName
  }
}]]></Code>
  </Screen>
</PCF>