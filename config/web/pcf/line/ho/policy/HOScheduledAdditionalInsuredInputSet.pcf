<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <InputSet
    id="HOScheduledAdditionalInsuredInputSet">
    <Require
      name="coveragePattern"
      type="gw.api.productmodel.ClausePattern"/>
    <Require
      name="coverable"
      type="Coverable"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Variable
      initialValue="coverable.getCoverage(coveragePattern.CodeIdentifier)"
      name="schedule"
      recalculateOnRefresh="true"
      type="Coverage"/>
    <Variable
      initialValue="new una.pageprocess.coverages.HOScheduledAdditionalInsuredPCFController(schedule)"
      name="pcfController"
      recalculateOnRefresh="true"
      type="una.pageprocess.coverages.HOScheduledAdditionalInsuredPCFController"/>
    <Variable
      initialValue="gw.plugin.Plugins.get(gw.plugin.contact.IContactConfigPlugin)"
      name="contactConfigPlugin"/>
    <Variable
      initialValue="coverable.PolicyLine.AdditionalInsuredOtherCandidates.asViews()"
      name="otherContacts"
      recalculateOnRefresh="true"
      type="AccountContactView[]"/>
    <Variable
      initialValue="pcfController.ExistingAdditionalInsureds"
      name="existingAdditionalInsureds"
      recalculateOnRefresh="true"
      type="AccountContactView[]"/>
    <InputGroup
      allowToggle="coveragePattern.allowToggle(coverable)"
      childrenVisible="coverable.getCoverageConditionOrExclusion(coveragePattern) != null"
      id="CovLocationInputGroup"
      label="coveragePattern.DisplayName"
      onToggle="coverable.setCoverageConditionOrExclusionExists(coveragePattern, VALUE)">
      <PostOnChange/>
      <ListViewInput
        def="HOScheduledItemsLV(schedule, openForEdit, pcfController)"
        label="displaykey.Web.Homeowners.HOCoveragesScreen.ScheduledProperty"
        labelAbove="true">
        <Toolbar>
          <AddButton
            hideIfReadOnly="true"
            id="AddContactsButton"
            iterator="HOScheduledItemsLV.ScheduledItemsIterator"
            label="displaykey.Web.Contact.Add"
            subMenuOnDemand="true"
            visible="true">
            <AddMenuItemIterator
              elementName="contactType"
              value="contactConfigPlugin.getAllowedContactTypesForPolicyContactRoleType(typekey.PolicyContactRole.TC_POLICYADDLINSURED)">
              <IteratorSort
                sortBy="contactType.DisplayName"
                sortOrder="1"/>
              <AddMenuItem
                conversionExpression="pcfController.addScheduledAdditionalInsured(PickedValue)"
                id="ContactType"
                iterator="HOScheduledItemsLV.ScheduledItemsIterator"
                label="displaykey.Web.Contact.AddNewOfType(contactType)"
                pickLocation="NewAdditionalInsuredPopup.push(coverable.PolicyLine, contactType)"/>
            </AddMenuItemIterator>
            <AddMenuItem
              conversionExpression="pcfController.addScheduledAdditionalInsured((coverable.PolicyLine.addNewAdditionalInsuredDetailForContact(PickedValue)))"
              id="AddFromSearch"
              iterator="HOScheduledItemsLV.ScheduledItemsIterator"
              label="displaykey.Web.Policy.Contact.FromAddressBook"
              pickLocation="ContactSearchPopup.push(&quot;AdditionalInsured&quot;)"/>
            <AddMenuItem
              id="AddExistingContact"
              iterator="HOScheduledItemsLV.ScheduledItemsIterator"
              label="displaykey.Web.Policy.Contact.AddExisting(PolicyAddlInsured.Type.TypeInfo.DisplayName)"
              visible="true">
              <AddMenuItemIterator
                elementName="additionalInsured"
                id="ContactOfSameType"
                value="existingAdditionalInsureds">
                <IteratorSort
                  sortBy="additionalInsured.DisplayName"
                  sortOrder="1"/>
                <AddMenuItem
                  id="ExistingAdditionalInsured"
                  iterator="HOScheduledItemsLV.ScheduledItemsIterator"
                  label="additionalInsured"
                  toCreateAndAdd="pcfController.addScheduledAdditionalInsured(coverable.PolicyLine.addNewAdditionalInsuredDetailForContact(additionalInsured.AccountContact.Contact))"/>
              </AddMenuItemIterator>
            </AddMenuItem>
            <AddMenuItem
              id="AddOtherContact"
              iterator="HOScheduledItemsLV.ScheduledItemsIterator"
              label="displaykey.Web.Policy.Contact.AddOtherContacts"
              visible="getOtherContacts().Count &gt; 0">
              <AddMenuItemIterator
                elementName="otherContact"
                id="ContactOfOtherType"
                value="otherContacts">
                <IteratorSort
                  sortBy="otherContact.DisplayName"
                  sortOrder="1"/>
                <AddMenuItem
                  id="OtherContact"
                  iterator="HOScheduledItemsLV.ScheduledItemsIterator"
                  label="otherContact"
                  toCreateAndAdd="pcfController.addScheduledAdditionalInsured((coverable.PolicyLine.addNewAdditionalInsuredDetailForContact(otherContact.AccountContact.Contact)))"/>
              </AddMenuItemIterator>
            </AddMenuItem>
          </AddButton>
          <RemoveButton
            hideIfReadOnly="true"
            id="removeButton"
            iterator="HOScheduledItemsLV.ScheduledItemsIterator"
            label="&quot;Remove&quot;"
            visible="true"/>
        </Toolbar>
      </ListViewInput>
    </InputGroup>
  </InputSet>
</PCF>