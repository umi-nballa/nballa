<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <CardViewPanel
    id="BP7LocationDetailCV">
    <Require
      name="location"
      type="BP7Location"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      initialValue="location.PolicyLocation"
      name="polLocation"
      recalculateOnRefresh="true"
      type="PolicyLocation"/>
    <Card
      id="Details"
      title="displaykey.Web.Policy.BP7.Location.Details">
      <PanelRow>
        <PanelColumn>
          <PanelRef
            id="mandatory">
            <TitleBar
              title="displaykey.Web.Policy.BP7.Location.Location"/>
            <PanelSet>
              <PanelRef>
                <DetailViewPanel>
                  <InputColumn>
                    <InputSet
                      editable="false"
                      id="BP7LocationDetailInputSet">
                      <Variable
                        initialValue="polLocation.Branch.Policy.Product"
                        name="product"/>
                      <Variable
                        initialValue="polLocation.AccountLocation"
                        name="acctLocation"
                        recalculateOnRefresh="true"/>
                      <Variable
                        initialValue="new contact.AddressAutocompleteHandler(&quot;city&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                        name="cityhandler"/>
                      <Variable
                        initialValue="new contact.AddressAutocompleteHandler(&quot;county&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                        name="countyhandler"
                        type="contact.AddressAutocompleteHandler"/>
                      <Variable
                        initialValue="new contact.AddressAutocompleteHandler(&quot;postalcode&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
                        name="pchandler"
                        type="contact.AddressAutocompleteHandler"/>
                      <!-- <BooleanRadioInput
                        editable="acctLocation.New"
                        id="NonSpecificLocation"
                        label="displaykey.Web.Account.Locations.LocationIsNonSpecific"
                        value="acctLocation.NonSpecific">
                        <PostOnChange/>
                      </BooleanRadioInput> -->
                      <!-- <Input
                        editable="true"
                        id="LocationCode"
                        label="displaykey.Web.Policy.LocationContainer.Location.LocationCode"
                        value="polLocation.AccountLocation.LocationCode"/> -->
                      <Input
                        editable="true"
                        id="LocationName"
                        label="displaykey.Web.Policy.LocationContainer.Location.LocationName"
                        value="polLocation.AccountLocation.LocationName"/>
                      <Input
                        editable="true"
                        id="InspectionContact"
                        label="displaykey.Web.Policy.LocationContainer.Location.InspectionContact"
                        value="polLocation.InspectionContact"/>
                      <InputSetRef
                        def="AddressInputSet(new gw.pcf.policylocation.PolicyLocationAddressOwner(polLocation))"
                        mode="polLocation.CountryCode"
                        visible="polLocation.SyncedToAccount"/>
                      <InputSet
                        id="UnsyncedAddressInputSet"
                        visible="not polLocation.SyncedToAccount">
                        <TextInput
                          id="unsyncedAddressString"
                          label="displaykey.Web.Policy.LocationContainer.Location.Address"
                          value="polLocation.addressString(&quot;\n&quot;, false, false)"/>
                        <TextInput
                          editable="true"
                          id="UnsyncedCounty"
                          label="displaykey.Web.ContactDetail.AddressDetail.County"
                          required="true"
                          value="polLocation.County"/>
                        <TypeKeyInput
                          editable="polLocation.canChangeState()"
                          id="UnsyncedCountry"
                          label="displaykey.Web.ContactDetail.AddressDetail.Country"
                          required="true"
                          value="polLocation.Country">
                          <PostOnChange/>
                        </TypeKeyInput>
                      </InputSet>
                      <Input
                        editable="true"
                        id="Phone"
                        label="displaykey.Web.Policy.LocationContainer.Location.Phone"
                        value="getFormattedPhone(polLocation.AccountLocation.Phone)"/>
                      <PickerInput
                        available="gw.api.domain.StateSet.get(&quot;TaxLocation&quot;).contains(polLocation.State)"
                        editable="true"
                        id="TaxLocation"
                        inputConversion="getTaxLocation(VALUE, polLocation)"
                        label="displaykey.Web.Policy.LocationContainer.Location.TaxLocation"
                        pickLocation="TaxLocationSearchPopup.push(polLocation.Branch, gw.api.util.JurisdictionMappingUtil.getJurisdiction(polLocation))"
                        value="polLocation.TaxLocation"
                        visible="product == &quot;BusinessOwners&quot; or product == &quot;WorkersComp&quot; or product == &quot;CommercialProperty&quot;"/>
                    </InputSet>
                    <InputDivider/>
                    <InputSetRef
                      def="BP7LocationBusinessFieldsInputSet(location, openForEdit)"
                      mode="polLocation.Branch.Policy.Product.CodeIdentifier"/>
                  </InputColumn>
                </DetailViewPanel>
              </PanelRef>
            </PanelSet>
          </PanelRef>
        </PanelColumn>
        <PanelColumn>
          <PanelRef
            def="BP7CoveragesDV(location, openForEdit, location.PolicyLine.Pattern.getCoverageCategory(gw.lob.bp7.BP7Categories.BP7LocationStdGrp.Code), jobWizardHelper)"
            id="MandatoryCoverages">
            <TitleBar
              title="displaykey.Web.LineWizard.Coverages"/>
          </PanelRef>
        </PanelColumn>
        <PanelColumn>
          <PanelRef
            def="BP7CoveragesDV(location, openForEdit, location.PolicyLine.Pattern.getCoverageCategory(gw.lob.bp7.BP7Categories.BP7LocationDefaultsGrp.Code), jobWizardHelper)"
            id="CoverageDefaults">
            <TitleBar
              title="displaykey.Web.Policy.BP7.Location.Defaults"/>
          </PanelRef>
        </PanelColumn>
      </PanelRow>
    </Card>
    <Card
      id="AdditionalCoveragesCard"
      title="displaykey.Ext.Web.LineWizard.AdditionalAndOptionalCoverages">
      <PanelRef
        def="BP7AdditionalCoveragesPanelSet(location, {gw.lob.bp7.BP7Categories.BP7LocationAddlGrp.Code}, true, jobWizardHelper)">
        <TitleBar
          title="displaykey.Web.LineWizard.AdditionalCoverages"/>
        <Toolbar/>
      </PanelRef>
      <PanelRef
        def="BP7OptionalCoverages_ExtPanelSet(location, {gw.lob.bp7.BP7Categories.BP7LocationOptionalGrp_EXT.Code}, true, jobWizardHelper)">
        <TitleBar
          title="displaykey.Ext.Web.LineWizard.OptionalCoverages"/>
        <Toolbar/>
      </PanelRef>
    </Card>
    <Card
      id="exclusionsAndConditionsCard"
      title="displaykey.Web.LineWizard.ExclusionsAndConditions">
      <PanelRef
        def="BP7AdditionalExclusionsAndConditionsPanelSet(location, {gw.lob.bp7.BP7Categories.BP7LocationExclGrp.Code, gw.lob.bp7.BP7Categories.BP7LocationCondGrp.Code}, true, jobWizardHelper)"
        id="policyLevelExclusionsAndConditions"/>
    </Card>
    <Card
      id="LocationQuestionsCard"
      title="displaykey.Web.Policy.LocationContainer.Location.Panel.Questions.Title"
      visible="polLocation.LocationAnswers.Count &gt; 0">
      <PanelRef
        def="QuestionSetsDV(polLocation.Branch.Policy.Product.getQuestionSetsByType(QuestionSetType.TC_LOCATION), polLocation, null)"/>
    </Card>
    <Card
      id="AdditionalInsuredCoverages"
      title="displaykey.Web.LineWizard.AdditionalInsuredCoverages">
      <PanelRef
        def="BP7AdditionalCoveragesPanelSet(location, {gw.lob.bp7.BP7Categories.BP7LocationAddlInsuredGrp.Code}, true, jobWizardHelper)"
        id="LocationAdditionalInsuredsCoverages">
        <TitleBar
          title="displaykey.Web.LineWizard.AdditionalInsuredCoverages"/>
        <Toolbar/>
      </PanelRef>
    </Card>
    <Code><![CDATA[uses gw.api.util.DisplayableException

  function getTaxLocation(code : String, policyLocation : PolicyLocation) : TaxLocation {
     if (code == null) {
         return null
     } else {
         var state = gw.api.util.JurisdictionMappingUtil.getJurisdiction(policyLocation)
         var locs = new gw.lob.common.TaxLocationQueryBuilder()
                 .withCodeStarting(code)
                 .withState(state)
                 .withEffectiveOnDate(policyLocation.Branch.PeriodStart)
                 .build().select() as gw.api.database.IQueryBeanResult<TaxLocation>
         if (locs.Count == 1) {
             return locs.FirstResult
         } else {
             throw new DisplayableException(displaykey.TaxLocation.Search.Error.InvalidCode(code, state.Description))
         }
     }
  }
  
  function getFormattedPhone(phone : String) : String{
    return phone != null ? (phone.substring(0, 3)+"-"+phone.substring(3, 6)+"-"+phone.substring(6, 10)) : phone
  }]]></Code>
  </CardViewPanel>
</PCF>