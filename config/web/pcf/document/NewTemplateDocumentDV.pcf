<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <DetailViewPanel
    id="NewTemplateDocumentDV">
    <Require
      name="DocumentCreationInfo"
      type="gw.document.DocumentCreationInfo"/>
    <Require
      name="document"
      type="Document"/>
    <Require
      name="account"
      type="Account"/>
    <Require
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Require
      name="job"
      type="Job"/>
    <Require
      name="activity"
      type="Activity"/>
    <Require
      name="emailTemplate"
      type="String"/>
    <Require
      name="documentsToSend"
      type="Document[]"/>
    <Require
      name="symbolTable"
      type="java.util.Map&lt;String, Object&gt;"/>
    <Require
      name="templateInfo"
      type="util.TemplateSearchResults"/>
    <Variable
      initialValue="document.Language"
      name="language"
      type="LanguageType"/>
    <Variable
      initialValue="null"
      name="docContainer"
      type="gw.api.domain.document.DocumentContainer"/>
    <Variable
      initialValue="gw.web.email.CreateEmailsScreenUIHelper.initNewEmail(emailTemplate, noDefaultTemplate, language,  symbolTable, documentsToSend)"
      name="newEmail"
      type="gw.api.email.Email"/>
    <Variable
      initialValue="emailTemplate == null"
      name="noDefaultTemplate"
      type="Boolean"/>
    <Variable
      initialValue="new gw.api.contact.ContactEmailAutocompleteHandler(account.AccountContacts.map(\contact -&gt; contact.Contact))"
      name="autoCompleteHandler"/>
    <InputColumn>
      <Label
        label="displaykey.Web.DocumentCreation.DocumentContents.Header"/>
      <Label
        label="displaykey.Java.Document.Creation.Template.Step1"/>
      <DocumentTemplateInput
        clearEnabled="false"
        editable="true"
        freeInputEnabled="false"
        id="TemplatePicker"
        label="displaykey.Java.Document.Creation.Template"
        onPick="resetTemplateBasedInfo()"
        pickLocation="DocumentTemplateSearchPopup.push(policyPeriod, account)"
        required="true"
        value="templateInfo.TemplateName"/>
      <Input
        editable="true"
        id="Language"
        label="displaykey.Web.DocumentTemplateSearch.Language"
        required="false"
        value="language"
        visible="LanguageType.getTypeKeys( false ).Count &gt; 1 and activity.DocumentTemplate != null">
        <PostOnChange
          onChange="changeLanguage()"/>
      </Input>
      <InputSet
        visible="DocumentCreationInfo.DocumentTemplateDescriptor != null">
        <Label
          label="displaykey.Java.Document.Creation.Template.Step2"/>
        <InputSetRef
          def="DocumentTemplateContextObjectInputSet(DocumentCreationInfo,document,account,policyPeriod,job)"
          mode="DocumentCreationInfo.DocumentTemplateDescriptor.TemplateId"/>
        <Label
          label="displaykey.Java.Document.Creation.Template.Step3"/>
        <!-- Note that two versions of the CreateDocument button are required
              depending on whether the Document Assistant is enabled. This is
              because the "download" attribute cannot contain a Gosu expression -->
        <ButtonInput
          action="web.document.DocumentsHelper.renderDocumentContents(DocumentCreationInfo, gw.document.DocumentProduction.createDocumentSynchronously(DocumentCreationInfo.DocumentTemplateDescriptor, web.document.DocumentsHelper.getDocumentCreationParameters(DocumentCreationInfo), DocumentCreationInfo.Document))"
          available="web.document.DocumentsHelper.isDocumentAssistantEnabled()"
          id="CreateDocumentWithAssistant"
          value="displaykey.Java.Document.Creation.CreateDocument"
          visible="web.document.DocumentsHelper.isDocumentAssistantEnabled()"/>
        <ButtonInput
          action="web.document.DocumentsHelper.renderDocumentContents(DocumentCreationInfo, gw.document.DocumentProduction.createDocumentSynchronously(DocumentCreationInfo.DocumentTemplateDescriptor, web.document.DocumentsHelper.getDocumentCreationParameters(DocumentCreationInfo), DocumentCreationInfo.Document))"
          available="!web.document.DocumentsHelper.isDocumentAssistantEnabled()"
          download="true"
          id="CreateDocument"
          value="displaykey.Java.Document.Creation.CreateDocument"
          visible="!web.document.DocumentsHelper.isDocumentAssistantEnabled()"/>
        <!-- <Label
          label="displaykey.Java.Document.Creation.Template.Step4"
          visible="!web.document.DocumentsHelper.isDocumentAssistantEnabled()"/> -->
        <!-- <DocumentFilePathInput
          editable="true"
          id="DocumentFilePath"
          value="DocumentCreationInfo.DocumentFilePath"/> -->
        <!-- <DocumentScript
          available="(!web.document.DocumentsHelper.isDocumentAssistantEnabled()) or (DocumentCreationInfo.File != null) or (DocumentCreationInfo.DocumentCreationScript != null)"
          editable="true"
          id="DocumentFile"
          label="displaykey.Java.Document.Creation.FileLocation"
          required="!web.document.DocumentsHelper.isDocumentAssistantEnabled()"
          value="DocumentCreationInfo.File"/> -->
      </InputSet>
      <Label
        label="&quot;CC Recipient&quot;"/>
      <ListViewInput
        editable="true"
        id="CcRecipientLVInput"
        label="displaykey.Web.Email.CCRecipients"
        labelAbove="true">
        <Toolbar
          visible="true">
          <IteratorButtons
            addVisible="true"
            iterator="CcRecipientLV"
            removeVisible="true"/>
        </Toolbar>
        <ListViewPanel
          editable="true"
          id="CcRecipientLV"
          visible="true">
          <RowIterator
            editable="true"
            elementName="CcRecipient"
            toCreateAndAdd="var ccRecip = new util.CCRecipients(); templateInfo.addTOCCRecipients(ccRecip,templateInfo); return ccRecip;"
            toRemove="templateInfo.CCRecipients.remove(CcRecipient); "
            value="templateInfo.CCRecipients">
            <Row
              editable="true">
              <TextCell
                editable="true"
                id="CcName"
                label="displaykey.Web.Email.Name"
                numCols="15"
                value="CcRecipient.Name">
                <PostOnChange
                  onChange="var emailForName = autoCompleteHandler.getEmailForName(CcRecipient.Name); if (emailForName != null) { CcRecipient.EmailAddress = emailForName }"
                  target="DATA_ONLY"/>
              </TextCell>
              <TextCell
                editable="true"
                id="CcEmail"
                label="displaykey.Web.Email.EmailAddress"
                numCols="15"
                required="true"
                value="CcRecipient.EmailAddress"
                visible="false"/>
            </Row>
          </RowIterator>
        </ListViewPanel>
      </ListViewInput>
      <CheckBoxInput
        editable="true"
        id="certifiedmail"
        label="displaykey.Web.Document.CertifiedMail"
        value="document.CertifiedMail_Ext"/>
      <CheckBoxInput
        editable="true"
        id="carboncopy"
        label="displaykey.Web.Document.Carboncopy"
        value="document.CarbonCopy_Ext"/>
      <CheckBoxInput
        editable="true"
        id="enclosures"
        label="displaykey.Web.Document.Enclosures"
        value="document.Enclosures_Ext">
        <PostOnChange/>
      </CheckBoxInput>
      <ListViewInput
        editable="true"
        label="displaykey.Web.Email.AttachedDocuments"
        labelAbove="true"
        visible="document.Enclosures_Ext">
        <Toolbar>
          <PickerToolbarButton
            action="PickExistingDocumentPopup.push(docContainer)"
            id="AddDocumentButton"
            label="displaykey.Web.Email.AddDocument"
            onPick="newEmail.addDocument(PickedValue)"
            shortcut="A"
            visible="true"/>
          <IteratorButtons
            addVisible="false"
            iterator="AttachedDocumentsLV"/>
        </Toolbar>
        <ListViewPanel
          editable="true"
          id="AttachedDocumentsLV">
          <RowIterator
            editable="true"
            elementName="attachedDocument"
            toRemove="newEmail.removeDocument( attachedDocument )"
            value="newEmail.Documents as DocumentBase[]">
            <Row>
              <Cell
                editable="true"
                id="Document"
                label="displaykey.Web.Email.DocumentName"
                value="attachedDocument.Name"/>
            </Row>
          </RowIterator>
        </ListViewPanel>
      </ListViewInput>
    </InputColumn>
    <InputColumn>
      <InputSetRef
        def="DocumentMetadataInputSet(document, account, policyPeriod.Policy, job, true)"
        editable="true"/>
    </InputColumn>
    <Code><![CDATA[function changeLanguage() {
  var templatePlugin = gw.plugin.Plugins.get(gw.plugin.document.IDocumentTemplateSource)
  var template = templatePlugin.getDocumentTemplate(DocumentCreationInfo.DocumentTemplateDescriptor.TemplateId, gw.api.util.LocaleUtil.toLanguage(language))
  if (template == null) {
    throw new gw.api.util.DisplayableException(displaykey.Web.Activity.DocumentTemplate.NotFound(DocumentCreationInfo.DocumentTemplateDescriptor.TemplateId, language))
  }
  else {
    DocumentCreationInfo.DocumentTemplateDescriptor = template
    resetTemplateBasedInfo()
  }
}

function resetTemplateBasedInfo() {
  DocumentCreationInfo.setDocumentFilePath(null)
  DocumentCreationInfo.Document?.Name = DocumentCreationInfo?.DocumentTemplateDescriptor.Name
  DocumentCreationInfo.Document?.MimeType = DocumentCreationInfo?.DocumentTemplateDescriptor.MimeType
  DocumentCreationInfo.Document?.SecurityType = DocumentCreationInfo?.DocumentTemplateDescriptor?.DefaultSecurityType
  DocumentCreationInfo.Document?.Type = DocumentCreationInfo?.DocumentTemplateDescriptor?.TemplateType
  DocumentCreationInfo.Document?.Section = (DocumentCreationInfo?.DocumentTemplateDescriptor?.getMetadataPropertyValue( "section" ) as String)
  DocumentCreationInfo.Document?.Locale = DocumentCreationInfo.DocumentTemplateDescriptor.Locale
  for (dynamicWidgetInfo in DocumentCreationInfo.DynamicWidgetInformation) {
    DocumentCreationInfo.setDefaultContextObjectValue(dynamicWidgetInfo.Name, eval(dynamicWidgetInfo.DefaultValueExpression))
    DocumentCreationInfo.setPossibleContextObjectValues(dynamicWidgetInfo.Name, eval(dynamicWidgetInfo.PossibleValuesExpression) as Object[])
  }
}]]></Code>
  </DetailViewPanel>
</PCF>