package rules.EventMessage.EventFired_dir.OnBase_dir
uses java.lang.IllegalStateException
uses java.lang.System
uses java.util.Date
uses gw.util.Base64Util
uses onbase.api.services.datamodels.UpdateKeywordsRequest

@gw.rules.RuleName("KW Update - Policy Period Changed")
internal class KWUpdatePolicyPeriodChanged {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
/*start00rule*/
return messageContext.Root typeis PolicyPeriod && (messageContext.EventName == "IssuePeriod" || messageContext.EventName == "ChangePeriod")
/*end00rule*/
}

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/

var policyPeriod = (messageContext.Root as PolicyPeriod)

if(not (policyPeriod.Job typeis Issuance) && not (policyPeriod.Job typeis PolicyChange)){
  throw new IllegalStateException("Unexpected job type ${policyPeriod.Job.Subtype} for message ${messageContext.EventName}")
}

var newPeriod = policyPeriod.getSlice(policyPeriod.EditEffectiveDate)

  var updateRequest = UpdateKeywordsRequest.fromPolicyPeriod(newPeriod)

  var payload = new onbase.api.messaging.updatekeywordsrequestmodel.UpdateKeywordsRequest(updateRequest)
  if(payload != null) {
    messageContext.createMessage(Base64Util.encode(payload.bytes()))
  }

/*end00rule*/
  }
}
