package rules.EventMessage.EventFired_dir.IVANS_dir.Policy_dir
uses una.model.PolicyPeriodDTO

@gw.rules.RuleName("PolicyPeriodAdded")
internal class PolicyPeriodAdded {
  static function doCondition(messageContext  :  entity.MessageContext) : boolean {
/*start00rule*/
return messageContext.EventName=="CreatePeriod"
/*end00rule*/
}

  static function doAction(messageContext  :  entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/

  var policyPeriod = messageContext.Root as PolicyPeriod
  var  policyPeriodDTO =new PolicyPeriodDTO()
  policyPeriodDTO.PolicyNumber =  policyPeriod.PolicyNumber
  if(policyPeriod.ProducerCodeOfRecord.Organization ==null) {
    policyPeriodDTO.AgencyNumber ="AGENCYNUMBER1"
  } else {
    policyPeriodDTO.AgencyNumber =policyPeriod.ProducerCodeOfRecord.Organization.AgenyNumber_Ext
  }
  policyPeriodDTO.AgentSystemID =""
  if(policyPeriod.Cancellation == null)  {
    policyPeriodDTO.CancelOrChangeReasonCode=""
    policyPeriodDTO.CancellationMethod=""
  } else {
    policyPeriodDTO.CancellationMethod=policyPeriod.Cancellation.DisplayType
    policyPeriodDTO.CancelOrChangeReasonCode=policyPeriod.Cancellation.CancelReasonCode.toString()
  }
  policyPeriodDTO.CompanyProductCode =policyPeriod.Policy.ProductCode
  policyPeriodDTO.FullTermAnnualPremium = policyPeriod.TotalPremiumRPT_amt *100
  policyPeriodDTO.LineOfBusinessCode=policyPeriod.Policy.ProductCode
  policyPeriodDTO.LineOfBusinessSubCode= "LOBSUBCODE1"
  policyPeriodDTO.NetChangePremium=policyPeriod.TotalCostRPT_amt *100
  policyPeriodDTO.OriginalPolicyInceptionDate =policyPeriod.PolicyStartDate
  policyPeriodDTO.PolicyExpirationDate =policyPeriod.PolicyEndDate
  policyPeriodDTO.PolicyEffectiveDate=policyPeriod.PolicyStartDate
  policyPeriodDTO.PolicyTerm =policyPeriod.TermNumber
  policyPeriodDTO.ProducerSubCode="PRODUCERSUBCODE1"
  policyPeriodDTO.RecordID ="POL"
  if(policyPeriod.EditEffectiveDate==null)  {
    policyPeriodDTO.TransactionEffectiveDate=policyPeriod.PolicyStartDate
  } else {
    policyPeriodDTO.TransactionEffectiveDate=policyPeriod.EditEffectiveDate
  }
  policyPeriodDTO.TransactionTypeCode=policyPeriod.Job.DisplayType
  policyPeriodDTO.WritingCompanyCode ="WritingCompanyCode"
  policyPeriodDTO.ReservedForFutureUse ="ReservedForFutureUse"
  var xml = new una.integration.gxmodel.policyperioddtomodel.PolicyPeriodDTO(policyPeriodDTO)
  messageContext.createMessage(xml.asUTFString())

/*end00rule*/
  }
}
