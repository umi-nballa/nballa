<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <Popup
    afterCommit="/* addContactContact() */"
    afterEnter="if (policyRoleDbaRole == null )   { policyRoleDbaRole = initializeDBAPolicyContact(); }"
    beforeCommit="reconstructAcctContact() "
    canEdit="true"
    countsAsWork="false"
    id="NewPolicyDBAContact_ExtPopup"
    returnType="PolicyContactRoleDBARole_Ext"
    startInEditMode="true"
    title="sourcePCR.AccountContactRole.AccountContact.Contact.DisplayName + &quot;: PolicyDBA Role &quot;">
    <LocationEntryPoint
      signature="NewPolicyDBAContact_ExtPopup(acct: Account, sourcePCR : PolicyContactRole, acRoleType : typekey.PolicyContactRole, contactType: typekey.ContactType)"/>
    <LocationEntryPoint
      signature="NewPolicyDBAContact_ExtPopup(policyRoleDbaRole : PolicyContactRoleDBARole_Ext, acct: Account, sourcePCR : PolicyContactRole)"/>
    <Variable
      name="policyRoleDbaRole"
      type="PolicyContactRoleDBARole_Ext"/>
    <Variable
      name="acct"
      type="Account"/>
    <Variable
      name="sourcePCR"
      type="PolicyContactRole"/>
    <Variable
      initialValue="newInitializeAcctContact()"
      name="acctContact"
      type="AccountContact"/>
    <Variable
      name="acRoleType"
      type="typekey.PolicyContactRole"/>
    <Variable
      name="contactType"
      type="typekey.ContactType"/>
    <Variable
      initialValue="new gw.pcf.duplicatecontacts.DuplicateContactsPopupHelper(acctContact.Contact)"
      name="duplicateContactsPopupHelper"/>
    <Variable
      initialValue="sourcePCR.BranchValue"
      name="policyPeriod"/>
    <Screen
      editable="true"
      id="ContactDetailScreen">
      <Toolbar>
        <ToolbarButton
          action="duplicateContactsPopupHelper.checkForDuplicatesOrUpdate(\ -&gt; CurrentLocation.commit()) "
          id="ForceDupCheckUpdate"
          label="displaykey.Button.Update"
          visible="acctContact.Contact != null and duplicateContactsPopupHelper.ShowButton"/>
        <EditButtons
          pickValue="policyRoleDbaRole"
          updateVisible="acctContact.Contact != null and not duplicateContactsPopupHelper.ShowButton"/>
        <ToolbarButton
          action="duplicateContactsPopupHelper.push()"
          id="CheckForDuplicates"
          label="displaykey.Web.Contact.CheckForDuplicates"
          visible="duplicateContactsPopupHelper.ShowButton"/>
      </Toolbar>
      <PanelRef
        def="AccountDBAContactCV(acctContact,false)"/>
    </Screen>
    <Code><![CDATA[function initializeDBAPolicyContact() : PolicyContactRoleDBARole_Ext{
      acctContact = newInitializeAcctContact()
      if (policyRoleDbaRole == null )   { 
        policyRoleDbaRole = policyPeriod.Lines.first().addNewPolicyDBARole(sourcePCR.AccountContactRole.AccountContact.Contact, sourcePCR,  acctContact.Contact) 
      }

  return policyRoleDbaRole
}

function newInitializeAcctContact() : AccountContact {
  if(acctContact == null){
      acctContact = acct.addNewAccountContactOfType(contactType)
      acctContact.addNewRole(typekey.AccountContactRole.TC_DBAROLE_EXT)
  }
  return acctContact
}


/*We may not want to remove an Account Level DBA from the Policy */

function reconstructAcctContact() {
  var existingPCContactWithABContactMatch = duplicateContactsPopupHelper.existingPCContactWithABContactMatch
  var contactRoles = acctContact.Roles  
  if (existingPCContactWithABContactMatch != null) { // existing ab contact that matches the current new contact
    acct.removeFromAccountContacts(acctContact)
    existingPCContactWithABContactMatch = acctContact.Contact.Bundle.loadByPublicId(Contact, existingPCContactWithABContactMatch.PublicID) as Contact
    existingPCContactWithABContactMatch.copyUIFieldsFromContact(acctContact.Contact)
 
    var matchingAcctContact = acct.AccountContacts.firstWhere(\ a -> a.Contact.AddressBookUID == existingPCContactWithABContactMatch.AddressBookUID )
    if (matchingAcctContact != null) { // if any acccount contacts in this account also match the ab contact
      matchingAcctContact.addRoles(contactRoles)
    } else {
      var newAcctContact = acct.addNewAccountContactForContact(existingPCContactWithABContactMatch)
      newAcctContact.addRoles(contactRoles)     
    }
    // remove the newly created contact from the bundle if there is a match found in pc
    acctContact.Contact.OfficialIDs.each(\ o -> o.remove() )
    acctContact.Contact.remove()
    acctContact.remove()
  }  
  else {
    acctContact.Contact = duplicateContactsPopupHelper.originalContact
  }
}]]></Code>
  </Popup>
</PCF>
