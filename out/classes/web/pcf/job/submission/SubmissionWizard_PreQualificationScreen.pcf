<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Screen
    editable="openForEdit"
    id="SubmissionWizard_PreQualificationScreen">
    <Require
      name="submission"
      type="Submission"/>
    <Require
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      initialValue="CurrentLocation as pcf.api.Wizard"
      name="wizard"
      type="pcf.api.Wizard"/>
    <Variable
      initialValue="policyPeriod.Policy.Product.getQuestionSetsByType(QuestionSetType.TC_PREQUAL)"
      name="preQualQuestionSets"
      recalculateOnRefresh="true"/>
    <Toolbar>
      <WizardButtons/>
      <ToolbarButtonSetRef
        mode="submission.Subtype"
        toolbarButtonSet="JobWizardToolbarButtonSet(policyPeriod, submission, jobWizardHelper)"/>
    </Toolbar>
    <DetailViewPanel
      visible="PolicyPeriod.Policy.Product.CodeIdentifier == &quot;Homeowners&quot;">
      <InputColumn>
        <TypeKeyInput
          editable="true"
          id="HOPolicyType"
          label="displaykey.Web.Homeowners.PolicyTypeLabel"
          required="true"
          value="PolicyPeriod.HomeownersLine_HOE.HOPolicyType">
          <PostOnChange
            onChange="changePolicyType(PolicyPeriod)"/>
        </TypeKeyInput>
      </InputColumn>
    </DetailViewPanel>
    <PanelRef
      def="QuestionSetsDV(preQualQuestionSets, policyPeriod, null)"
      id="PreQualQuestionSetsDV"
      visible="true"/>
    <Code><![CDATA[function changePolicyType(period : PolicyPeriod) {
  PolicyPeriod.HomeownersLine_HOE.Dwelling.setPolicyTypeAndDefaults()
  if (PolicyPeriod.OpenForEdit) {
    gw.web.productmodel.ProductModelSyncIssuesHandler.syncQuestions({PolicyPeriod}, jobWizardHelper)
    
    // remove coverages on policy-type change
    var line = PolicyPeriod.HomeownersLine_HOE
    var dwelling = line.Dwelling

    var lineCoverages = line.AllCoverages
    for (lineCoverage in lineCoverages) {
      lineCoverage.remove()
    }
    var dwellingCoverages = dwelling.Coverages
    for (dwellingCoverage in dwellingCoverages) {
      dwellingCoverage.remove()
    }
  
    // remove exclusions
    var lineExclusions = line.AllExclusions
    for (lineExclusion in lineExclusions) {
      lineExclusion.remove()
    }
 
    // remove conditions
    var lineConditions = line.AllConditions
    for (lineCondition in lineConditions) {
      lineCondition.remove()
    }
 
    dwelling.InitialCoveragesCreated = false
    line.InitialCoveragesCreated = false
    line.InitialExclusionsCreated = false
    line.InitialConditionsCreated = false
  }
}]]></Code>
  </Screen>
</PCF>