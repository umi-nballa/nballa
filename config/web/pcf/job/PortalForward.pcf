<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <Forward
    desc="Checks for account and producer and then creates new submission"
    id="PortalForward"
    onBeforeForward="setPortalSession()"
    parent="AccountForward()">
    <LocationEntryPoint
      signature="PortalForward(theAccountNumber : String, theJobNumber : String)"/>
    <Variable
      name="theAccountNumber"
      type="String"/>
    <Variable
      name="theJobNumber"
      type="String"/>
    <Variable
      initialValue="if (theAccountNumber &lt;&gt; null) { return Account.finder.findAccountByAccountNumber(theAccountNumber)} else { return null} "
      name="accountToFind"
      type="Account"/>
    <Variable
      initialValue="if (theJobNumber &lt;&gt; null) { return Job.finder.findJobByJobNumber(theJobNumber)} else {return null }"
      name="jobToFind"
      type="Job"/>
    <Variable
      initialValue="checkForError()"
      name="error"
      type="String"/>
    <ForwardCondition
      action="Portal.go(accountToFind)"
      condition="theAccountNumber &lt;&gt; null"/>
    <ForwardCondition
      action="JobForward.go(jobToFind)"
      condition="theJobNumber != null"/>
    <Code><![CDATA[function checkForError() : String{
  if (theAccountNumber == null) {
    return displaykey.Web.Errors.MissingUrlParameter(theAccountNumber)
  }
  if (theJobNumber == null) {
    return displaykey.Web.Errors.MissingUrlParameter(theJobNumber)
  }
  if (theAccountNumber <> null) {
    if (accountToFind == null) {
      return displaykey.Web.Errors.InvalidUrlParameter(displaykey.Web.AccountSearch.AccountNumber, theAccountNumber)
    }
    if (not User.util.CurrentUser.canView( accountToFind )) {
      return displaykey.Java.Error.Permission.View(displaykey.Web.TabBar.Account)
    }
  } else {
    if (jobToFind == null) {
      return displaykey.Web.Errors.InvalidUrlParameter("","")
    }
    if (not User.util.CurrentUser.canView( jobToFind )) {
      return displaykey.Java.Error.Permission.View("")
    }
  }
  return null
}

function getAccountReturnTo() : String {
  if (theAccountNumber <> null) {
    return theAccountNumber
  }
  return jobToFind.Policy.Account.AccountNumber
}
function setPortalSession() {
  var sessionMap = gw.api.web.Scopes.getSession()
  sessionMap.put("AgentPortal", "true")
  sessionMap.put("PortalAccount", getAccountReturnTo())
}]]></Code>
  </Forward>
</PCF>