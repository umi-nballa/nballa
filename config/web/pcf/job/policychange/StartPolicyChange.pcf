<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Page
    afterCancel="PolicyFileForward.go(policyPeriod.PolicyNumber)"
    autosaveable="false"
    canEdit="true"
    canVisit="perm.PolicyPeriod.view(policyPeriod) and perm.PolicyChange.create"
    countsAsWork="false"
    id="StartPolicyChange"
    parent="PolicyFile(policyPeriod, policyPeriod.EditEffectiveDate)"
    startInEditMode="true"
    title="displaykey.Web.PolicyChange.StartPolicyChange">
    <LocationEntryPoint
      signature="StartPolicyChange(policyPeriod : PolicyPeriod, initiateSERP : boolean)"/>
    <Variable
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Variable
      initialValue="initiateSERP ? policyPeriod.PeriodEnd.addDays(-1) : gw.web.job.policychange.StartPolicyChangeUIHelper.applyEffectiveTimePluginForPolicyChange( policyPeriod, job, policyPeriod.EditEffectiveDate )"
      name="effectiveDate"
      type="java.util.Date"/>
    <Variable
      initialValue="new PolicyChange()"
      name="job"
      type="PolicyChange"/>
    <Variable
      initialValue="gw.web.job.policychange.StartPolicyChangeUIHelper.getInForcePeriodWithBasedOn(policyPeriod, effectiveDate)"
      name="inForcePeriod"
      recalculateOnRefresh="true"
      type="PolicyPeriod"/>
    <Variable
      initialValue="false"
      name="initiateSERP"
      type="boolean"/>
    <Screen
      id="StartPolicyChangeScreen">
      <Toolbar>
        <ToolbarButton
          action="setSERPIndicator();gw.acc.futuredatedchanges.job.StartPolicyChangeHelper_Ext.startPolicyChangeWizard(job, policyPeriod, effectiveDate, CurrentLocation)"
          available="not policyPeriod.canStartFutureChangeOnDate_Ext(effectiveDate)"
          confirmMessage="gw.web.job.policychange.StartPolicyChangeUIHelper.getConfirmMessage(inForcePeriod, effectiveDate)"
          id="NewPolicyChange"
          label="displaykey.Button.StartPolicyChange"
          shortcut="N"/>
        <ToolbarButton
          action="CurrentLocation.cancel()"
          id="Cancel"
          label="displaykey.Button.Cancel"/>
      </Toolbar>
      <Verbatim
        id="ErrorMessage"
        label="displaykey.Web.PolicyChange.StartPolicyChange.Error(policyPeriod.Policy.canStartPolicyChange(effectiveDate))"
        visible="policyPeriod.Policy.canStartPolicyChange(effectiveDate) != null"
        warning="true"/>
      <Verbatim
        id="WarningMessage"
        label="displaykey.Web.PolicyChange.StartPolicyChange.Warning(gw.web.job.policychange.StartPolicyChangeUIHelper.getPolicyChangeWarningMessage(inForcePeriod, effectiveDate))"
        visible="gw.web.job.policychange.StartPolicyChangeUIHelper.getPolicyChangeWarningMessage(inForcePeriod, effectiveDate) != null"
        warning="true"/>
      <Verbatim
        id="BeyondElevenMonthsErrorID"
        label="displaykey.Accelerator.FutureDatedChanges.CannotStartFutureChangeBeyondDate(policyPeriod.TermType == TermType.TC_ANNUAL ? policyPeriod.PeriodEnd.addMonths(ScriptParameters.FutureChangesPermissibleMonthsForAnnualTermPolicy_Ext).addDays(-1) : policyPeriod.PeriodEnd.addMonths(ScriptParameters.FutureChangesPermissibleMonthsForOtherTermPolicy_Ext).addDays(-1))"
        visible="policyPeriod.canStartFutureChangeOnDate_Ext(effectiveDate)"
        warning="true"/>
      <DetailViewPanel
        id="StartPolicyChangeDV">
        <InputColumn>
          <DateTimeInput
            available="!initiateSERP"
            editable="true"
            id="EffectiveDate"
            label="displaykey.Web.Job.EffectiveDate"
            required="true"
            timeVisible="false"
            value="effectiveDate"/>
          <TextAreaInput
            editable="true"
            id="Description"
            label="displaykey.Web.Job.Description"
            maxChars="500"
            numCols="50"
            numRows="6"
            required="true"
            value="job.Description"
            visible="!policyPeriod.HomeownersLine_HOEExists"/>
          <TypeKeyInput
            editable="true"
            id="ReasonforChange_Ext"
            label="displaykey.Web.Job.ReasonforChange_Ext"
            required="true"
            value="job.ReasonforChange_Ext"
            visible="policyPeriod.HomeownersLine_HOEExists"/>
          <TypeKeyInput
            editable="true"
            id="Reason1_Ext"
            label="displaykey.Web.Job.Reason1_Ext"
            value="job.Reason1_Ext"
            visible="policyPeriod.HomeownersLine_HOEExists">
            <PostOnChange/>
          </TypeKeyInput>
          <TypeKeyInput
            editable="true"
            id="Reason2_Ext"
            label="displaykey.Web.Job.Reason2_Ext"
            value="job.Reason2_Ext"
            visible="job.Reason1_Ext != null &amp;&amp; policyPeriod.HomeownersLine_HOEExists">
            <PostOnChange/>
          </TypeKeyInput>
          <RangeInput
            editable="true"
            id="Reason3_Ext"
            label="displaykey.Web.Job.Reason3_Ext"
            value="job.Reason3_Ext"
            valueRange="typekey.Reason3_Ext.Type.getTypeKeysByCategory(policyPeriod.BaseState)"
            visible="job.Reason2_Ext != null &amp;&amp; policyPeriod.HomeownersLine_HOEExists"/>
          <TextAreaInput
            editable="true"
            id="ReasonFreeForm_Ext"
            label="&quot;&quot;"
            maxChars="500"
            numCols="50"
            numRows="6"
            required="job.ReasonforChange_Ext != null &amp;&amp; job.Reason1_Ext == null &amp;&amp; job.Reason2_Ext == null &amp;&amp; job.Reason3_Ext == null"
            value="job.ReasonFreeForm_Ext"
            visible="policyPeriod.HomeownersLine_HOEExists"/>
        </InputColumn>
      </DetailViewPanel>
    </Screen>
    <Code><![CDATA[function setSERPIndicator()  {
  if(initiateSERP) {
    gw.transaction.Transaction.runWithNewBundle(\bundle -> {
      var localPolicyPeriod = bundle.add(job.LatestPeriod)
      localPolicyPeriod.SERPEndorsed_Ext = true
    })  
  }
}]]></Code>
  </Page>
</PCF>