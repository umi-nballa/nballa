<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Page
    afterCancel="PolicyFileForward.go(policyPeriod.PolicyNumber)"
    autosaveable="false"
    canEdit="true"
    canVisit="perm.PolicyPeriod.view(policyPeriod) and perm.Cancellation.create"
    countsAsWork="false"
    id="StartCancellation"
    parent="PolicyFile(policyPeriod, policyPeriod.EditEffectiveDate)"
    startInEditMode="true"
    title="displaykey.Web.Cancellation.StartCancellation(policyPeriod.PolicyNumberDisplayString)">
    <LocationEntryPoint
      signature="StartCancellation(policyPeriod : PolicyPeriod)"/>
    <Variable
      name="policyPeriod"
      type="PolicyPeriod"/>
    <Variable
      initialValue="policyPeriod.Policy"
      name="policy"
      type="Policy"/>
    <Variable
      initialValue="new Cancellation()"
      name="job"
      type="Cancellation"/>
    <Variable
      initialValue="null"
      name="effectiveDate"
      type="java.util.Date"/>
    <Variable
      initialValue="(effectiveDate != null) ? entity.Policy.finder.findPolicyPeriodByPolicyAndAsOfDate(policy, effectiveDate) : null"
      name="inForcePeriod"
      recalculateOnRefresh="true"
      type="PolicyPeriod"/>
    <Variable
      initialValue="inForcePeriod != null and inForcePeriod.hasFinalAuditFinished()"
      name="hasFinalAuditFinished"
      recalculateOnRefresh="true"
      type="boolean"/>
    <Variable
      initialValue="effectiveDate != null and policy.isOOSChange(effectiveDate)"
      name="isOOSChange"
      recalculateOnRefresh="true"
      type="boolean"/>
    <Variable
      initialValue="new una.pageprocess.cancellation.CancellationPCFController (job, policyPeriod)"
      name="pcfController"/>
    <Variable
      initialValue="Cancellation.findUWPeriodEnd(policyPeriod)"
      name="uwPeriodEnd"/>
    <Screen
      id="StartCancellationScreen">
      <Toolbar>
        <ToolbarButton
          action="if (job.startJobAndCommit(policy, effectiveDate, pcfController.CancellationRefundMethod, CurrentLocation)) {CancellationWizard.go(job, job.LatestPeriod)                         }"
          available="policy.canStartCancellation(effectiveDate) == null"
          confirmMessage="confirmationMessage()"
          id="NewCancellation"
          label="displaykey.Button.StartCancellation"/>
        <ToolbarButton
          action="CurrentLocation.cancel()"
          id="Cancel"
          label="displaykey.Button.Cancel"/>
      </Toolbar>
      <Verbatim
        id="ErrorMessage"
        label="displaykey.Web.Cancellation.Error.CannotStart(policy.canStartCancellation(effectiveDate))"
        visible="effectiveDate != null and policy.canStartCancellation(effectiveDate) != null"
        warning="true"/>
      <Verbatim
        id="WarningMessage"
        label="displaykey.Web.PolicyChange.StartPolicyChange.Warning(getWarningMessage(policyPeriod))"
        visible="getWarningMessage(policyPeriod) != null"
        warning="true"/>
      <DetailViewPanel
        id="CancelPolicyDV">
        <InputColumn
          width="50%">
          <!-- The cancellation source determines which reason codes are available -->
          <TypeKeyInput
            editable="true"
            filter="perm.System.cancelcarriersource or VALUE == &quot;Insured&quot;"
            id="Source"
            label="displaykey.Web.CancellationWizard.Source"
            required="true"
            value="job.Source">
            <PostOnChange/>
          </TypeKeyInput>
          <!-- Setting the reason code can also set a default refund calculation method and effective date -->
          <TypeKeyInput
            editable="true"
            filter="pcfController.getCancelReasonCodes(VALUES)"
            id="Reason"
            label="displaykey.Web.CancellationWizard.Reason"
            required="true"
            value="job.CancelReasonCode">
            <PostOnChange
              onChange="effectiveDate = job.CancelReasonCode != null ? job.getDefaultEffectiveDate(policyPeriod, pcfController.CancellationRefundMethod) : effectiveDate;job.Description=job.CancelReasonCode.Description; pcfController.onChangeReasonCode(job.CancelReasonCode, effectiveDate)"/>
          </TypeKeyInput>
          <Label
            label="displaykey.una.cancellation.CancelReasonDetails"
            visible="pcfController.areCancelReasonDetailsVisible()"/>
          <ListViewInput
            labelAbove="true"
            visible="pcfController.areCancelReasonDetailsVisible()"
            width="50%">
            <Toolbar>
              <IteratorButtons
                iterator="CRDetail"
                showAddConfirmMessage="false"
                showRemoveConfirmMessage="false"/>
            </Toolbar>
            <ListViewPanel
              id="CancelReasonDetailLV">
              <RowIterator
                autoAdd="job.CancelReasonDetails.Count == 0 "
                editable="true"
                elementName="cancelReasonDetail"
                hasCheckBoxes="true"
                hideCheckBoxesIfReadOnly="true"
                id="CRDetail"
                toAdd="job.addToCancelReasonDetails(cancelReasonDetail)"
                toRemove="job.removeFromCancelReasonDetails(cancelReasonDetail)"
                value="job.CancelReasonDetails">
                <Row>
                  <RangeCell
                    editable="true"
                    id="ReasonDetailCode"
                    label="displaykey.una.cancellation.reasondetailcode"
                    required="true"
                    value="cancelReasonDetail.Code"
                    valueRange="pcfController.ReasonDetailRange">
                    <PostOnChange
                      onChange="pcfController.onChangeReasonDetailCode(cancelReasonDetail)"/>
                  </RangeCell>
                  <TextCell
                    editable="true"
                    id="description"
                    label="displaykey.una.cancellation.ReasonDetailDescription"
                    required="true"
                    value="cancelReasonDetail.Description">
                    <PostOnChange/>
                  </TextCell>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
          <TextAreaInput
            align="center"
            boldValue="true"
            editable="pcfController.isReasonDescriptionEditable()"
            id="CumulativeDescription"
            label="displaykey.Web.CancellationWizard.ReasonDescription"
            maxChars="811"
            numCols="65"
            numRows="5"
            value="pcfController.CumulativeReasonDetailsDescription"/>
          <!-- <TextAreaInput
            editable="true"
            id="ReasonDescription"
            label="displaykey.Web.CancellationWizard.ReasonDescription"
            numCols="30"
            numRows="3"
            value="job.Description"/> -->
          <!-- Refund calculation method is not editable for rewrites -->
          <RangeInput
            id="CalcMethod"
            label="displaykey.Web.CancellationWizard.CalcMethod"
            required="true"
            value="pcfController.CancellationRefundMethod"
            valueRange="{pcfController.CancellationRefundMethod}">
            <PostOnChange
              onChange="effectiveDate = job.CancelReasonCode != null ? job.getDefaultEffectiveDate(policyPeriod, pcfController.CancellationRefundMethod) : effectiveDate"/>
          </RangeInput>
          <!-- Effective date is only editable if the refund method is not "flat" and the period is issued.  If date's time component is not editable, need to apply effective time plugin. -->
          <DateTimeInput
            editable="job.canEnterInitialEffectiveDate(policyPeriod, effectiveDate)"
            id="CancelDate"
            label="displaykey.Web.CancellationWizard.CancelDate"
            onChange="pcfController.onChangeCancelEffectiveDate(effectiveDate)"
            required="true"
            timeVisible="false"
            validationExpression="job.validateEffectiveDate(policyPeriod, effectiveDate, pcfController.CancellationRefundMethod)"
            value="effectiveDate"/>
          <DateTimeInput
            editable="true"
            id="MailDate"
            label="displaykey.una.cancellation.CancellationMailDate"
            onChange="pcfController.onChangeMailDate(job.CancelLetterMailDate)"
            required="true"
            timeVisible="false"
            validationExpression="pcfController.validateMailDate()"
            value="pcfController.CancellationLetterMailDate"
            visible="job.Source == TC_CARRIER"/>
          <Input
            id="NumberOfDaysNotice"
            label="displaykey.una.cancellation.NumberOfDaysNotice"
            required="false"
            value="pcfController.NumberOfDaysNotice"
            visible="job.Source == TC_CARRIER"/>
          <CheckBoxInput
            editable="true"
            id="SuppressPrint"
            label="displaykey.una.cancellation.SupressPrint"
            required="false"
            value="job.SupressPrint"/>
        </InputColumn>
        <InputColumn
          width="50%"/>
      </DetailViewPanel>
    </Screen>
    <Code><![CDATA[function confirmationMessage() : String {
  var result = ""
  if(hasFinalAuditFinished){
    result += (effectiveDate == inForcePeriod.PeriodStart
      ? displaykey.Web.Job.FinalAuditCompletedFlatCancellation
      : displaykey.Web.Job.FinalAuditCompletedCancellation)
  }
  return result
}

function getWarningMessage(pInForcePeriod : PolicyPeriod) : String {
  var messages = new java.util.ArrayList<String>()
  if (pInForcePeriod != null) {
    if ( pInForcePeriod.Policy.RewrittenToNewAccountDestination != null){
      messages.add(displaykey.Web.Job.ChangeRewriteNewAccountPolicy(pInForcePeriod.Policy.RewrittenToNewAccountDestination.LatestBoundPeriod.PolicyNumber))
    }
  }
  return messages.Empty ? null : messages.join(", ")
}
]]></Code>
  </Page>
</PCF>