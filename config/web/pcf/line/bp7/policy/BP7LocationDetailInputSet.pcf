<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <InputSet
    id="BP7LocationDetailInputSet">
    <Require
      name="polLocation"
      type="PolicyLocation"/>
    <Variable
      initialValue="polLocation.Branch.Policy.Product"
      name="product"/>
    <Variable
      initialValue="polLocation.AccountLocation"
      name="acctLocation"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="new contact.AddressAutocompleteHandler(&quot;city&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
      name="cityhandler"/>
    <Variable
      initialValue="new contact.AddressAutocompleteHandler(&quot;county&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
      name="countyhandler"
      type="contact.AddressAutocompleteHandler"/>
    <Variable
      initialValue="new contact.AddressAutocompleteHandler(&quot;postalcode&quot;,&quot;Country,City,County,State,PostalCode&quot;,true)"
      name="pchandler"
      type="contact.AddressAutocompleteHandler"/>
    <BooleanRadioInput
      editable="acctLocation.New"
      id="NonSpecificLocation"
      label="displaykey.Web.Account.Locations.LocationIsNonSpecific"
      value="acctLocation.NonSpecific">
      <PostOnChange/>
    </BooleanRadioInput>
    <Input
      editable="true"
      id="LocationCode"
      label="displaykey.Web.Policy.LocationContainer.Location.LocationCode"
      value="polLocation.AccountLocation.LocationCode"
      visible="product.Abbreviation != &quot;PA&quot;"/>
    <Input
      editable="true"
      id="LocationName"
      label="displaykey.Web.Policy.LocationContainer.Location.LocationName"
      value="polLocation.AccountLocation.LocationName"
      visible="product.Abbreviation != &quot;PA&quot;"/>
    <InputSetRef
      def="AddressInputSet(new gw.pcf.policylocation.PolicyLocationAddressOwner(polLocation))"
      mode="polLocation.CountryCode"
      visible="polLocation.SyncedToAccount"/>
    <InputSet
      id="UnsyncedAddressInputSet"
      visible="not polLocation.SyncedToAccount">
      <TextInput
        id="unsyncedAddressString"
        label="displaykey.Web.Policy.LocationContainer.Location.Address"
        value="polLocation.addressString(&quot;\n&quot;, false, false)"/>
      <TextInput
        editable="true"
        id="UnsyncedCounty"
        label="displaykey.Web.ContactDetail.AddressDetail.County"
        value="polLocation.County"/>
      <TypeKeyInput
        editable="polLocation.canChangeState()"
        id="UnsyncedCountry"
        label="displaykey.Web.ContactDetail.AddressDetail.Country"
        required="true"
        value="polLocation.Country">
        <PostOnChange/>
      </TypeKeyInput>
    </InputSet>
    <Input
      editable="true"
      id="Phone"
      label="displaykey.Web.Policy.LocationContainer.Location.Phone"
      value="polLocation.AccountLocation.Phone"/>
    <PickerInput
      available="gw.api.domain.StateSet.get(&quot;TaxLocation&quot;).contains(polLocation.State)"
      editable="true"
      id="TaxLocation"
      inputConversion="getTaxLocation(VALUE, polLocation)"
      label="displaykey.Web.Policy.LocationContainer.Location.TaxLocation"
      pickLocation="TaxLocationSearchPopup.push(polLocation.Branch, gw.api.util.JurisdictionMappingUtil.getJurisdiction(polLocation))"
      value="polLocation.TaxLocation"
      visible="product == &quot;BusinessOwners&quot; or product == &quot;WorkersComp&quot; or product == &quot;CommercialProperty&quot;"/>
    <Code><![CDATA[uses gw.api.util.DisplayableException

  function getTaxLocation(code : String, policyLocation : PolicyLocation) : TaxLocation {
     if (code == null) {
         return null
     } else {
         var state = gw.api.util.JurisdictionMappingUtil.getJurisdiction(policyLocation)
         var locs = new gw.lob.common.TaxLocationQueryBuilder()
                 .withCodeStarting(code)
                 .withState(state)
                 .withEffectiveOnDate(policyLocation.Branch.PeriodStart)
                 .build().select() as gw.api.database.IQueryBeanResult<TaxLocation>
         if (locs.Count == 1) {
             return locs.FirstResult
         } else {
             throw new DisplayableException(displaykey.TaxLocation.Search.Error.InvalidCode(code, state.Description))
         }
     }
  }]]></Code>
  </InputSet>
</PCF>